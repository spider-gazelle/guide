{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>An elegant web framework designed to be simple, powerful and fast.</p>"},{"location":"#feature-overview","title":"Feature Overview","text":"<p>Spider-Gazelle employs some unique concepts, features, and design principles:</p> <ul> <li>Self documenting, can generate an OpenAPI description of your project</li> <li>Annotations are used to define &amp; configure routes, filters and error handlers</li> <li>Implements strong parameter typing with customisable parsing</li> <li>Parses request bodies and serialises responses based on Accept and Content-Type headers</li> <li>Specs are simple to write, leveraging HotTopic</li> <li>Exceptions in development are helpful, leveraging Exception Page</li> <li>Puts you in control, customise command line options, when the server is started, how your app is configured etc</li> </ul>"},{"location":"#who-builds-it","title":"Who builds it?","text":"<p>Place Technology are a fast-paced team of developers and designers based in Sydney and Brisbane, Australia.</p> <ul> <li>Github Organization</li> </ul>"},{"location":"#example-apps","title":"Example apps","text":"<ul> <li>Spider-Gazelle Template</li> <li>Apple/Google Wallet Abstraction</li> <li>PlaceOS</li> <li>Core</li> <li>Staff API</li> </ul>"},{"location":"#example-openapi-docs","title":"Example OpenAPI docs","text":"<p>Note that the editor allows you to generate API clients in many languages, which can be a massive time saver.</p> <ul> <li>PlaceOS</li> <li>Staff-API</li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>About</li> <li>Getting Started<ul> <li>Routing</li> <li>Sessions and Cookies</li> <li>Writing Specs</li> </ul> </li> <li>New Project<ul> <li>Logging and instrumetion</li> <li>Command line options</li> </ul> </li> <li>Self Documentation<ul> <li>Routes</li> <li>Schema</li> <li>Params</li> </ul> </li> <li>Deployment</li> <li>Source Documentation<ul> <li>Aliases</li> <li>Action Controller<ul> <li>Errors</li> <li>Responders</li> <li>Support</li> </ul> </li> <li>Route<ul> <li>Params</li> <li>Param errors</li> <li>Route errors</li> </ul> </li> <li>Session</li> </ul> </li> </ul>"},{"location":"ActionController/aliases/","title":"Aliases","text":""},{"location":"ActionController/aliases/#AC","title":"alias <code>AC</code>","text":"Alias definition <code>ActionController</code>"},{"location":"Base/","title":"Index","text":""},{"location":"Base/#ActionController::Base","title":"abstract class <code>ActionController::Base</code> inherits <code>Reference</code>","text":"Included modules <code>ActionController::Responders</code> <code>ActionController::Route::Builder</code>"},{"location":"Base/#ActionController::Base-constants","title":"Constants","text":""},{"location":"Base/#ActionController::Base::AFTER_MAPPINGS","title":"<code>AFTER_MAPPINGS = {} of Nil =&gt; Nil</code>","text":"<p>klass =&gt; {function =&gt; options}</p>"},{"location":"Base/#ActionController::Base::AROUND_MAPPINGS","title":"<code>AROUND_MAPPINGS = {} of Nil =&gt; Nil</code>","text":"<p>klass =&gt; {function =&gt; options}</p>"},{"location":"Base/#ActionController::Base::BEFORE_MAPPINGS","title":"<code>BEFORE_MAPPINGS = {} of Nil =&gt; Nil</code>","text":"<p>klass =&gt; {function =&gt; options}</p>"},{"location":"Base/#ActionController::Base::CONCRETE_CONTROLLERS","title":"<code>CONCRETE_CONTROLLERS = {} of Nil =&gt; Nil</code>","text":"<p>Base route =&gt; klass name</p>"},{"location":"Base/#ActionController::Base::CRUD_METHODS","title":"<code>CRUD_METHODS = {\"index\" =&gt; {\"get\", \"/\", false}, \"new\" =&gt; {\"get\", \"/new\", false}, \"create\" =&gt; {\"post\", \"/\", false}, \"show\" =&gt; {\"get\", \"/:id\", true}, \"edit\" =&gt; {\"get\", \"/:id/edit\", true}, \"update\" =&gt; {\"patch\", \"/:id\", true}, \"replace\" =&gt; {\"put\", \"/:id\", true}, \"destroy\" =&gt; {\"delete\", \"/:id\", true}}</code>","text":""},{"location":"Base/#ActionController::Base::DEFAULT_PARAM_ID","title":"<code>DEFAULT_PARAM_ID = {} of Nil =&gt; Nil</code>","text":"<p>Route IDs params</p>"},{"location":"Base/#ActionController::Base::FILTER_TYPES","title":"<code>FILTER_TYPES = [\"ROUTES\", \"BEFORE\", \"AROUND\", \"AFTER\", \"RESCUE\", \"FORCE\", \"SKIP\"] of ::String</code>","text":""},{"location":"Base/#ActionController::Base::FORCE_MAPPINGS","title":"<code>FORCE_MAPPINGS = {} of Nil =&gt; Nil</code>","text":"<p>klass =&gt; {function =&gt; options}</p>"},{"location":"Base/#ActionController::Base::RESCUE_MAPPINGS","title":"<code>RESCUE_MAPPINGS = {} of Nil =&gt; Nil</code>","text":"<p>klass =&gt; {function =&gt; options}</p>"},{"location":"Base/#ActionController::Base::ROUTES_MAPPINGS","title":"<code>ROUTES_MAPPINGS = {} of Nil =&gt; Nil</code>","text":"<p>klass =&gt; {function =&gt; options}</p>"},{"location":"Base/#ActionController::Base::SKIP_MAPPINGS","title":"<code>SKIP_MAPPINGS = {} of Nil =&gt; Nil</code>","text":"<p>klass =&gt; {function =&gt; options}</p>"},{"location":"Base/#ActionController::Base::TEMPLATE_LAYOUT","title":"<code>TEMPLATE_LAYOUT = {} of Nil =&gt; Nil</code>","text":"<p>Template support</p>"},{"location":"Base/#ActionController::Base::TEMPLATE_PATH","title":"<code>TEMPLATE_PATH = {ActionController::Base =&gt; \"./src/views/\"} of Nil =&gt; Nil</code>","text":""},{"location":"Base/#ActionController::Base-constructors","title":"Constructors","text":""},{"location":"Base/#ActionController::Base.new(context,action_name,__head_request__)","title":"<code>.new(context : HTTP::Server::Context, action_name : Symbol = :index, __head_request__ : Bool = false)</code>","text":"View source"},{"location":"Base/#ActionController::Base-class-methods","title":"Class methods","text":""},{"location":"Base/#ActionController::Base.__init_routes__(router)","title":"<code>.__init_routes__(router)</code>","text":"<p>To support inheritance</p> View source"},{"location":"Base/#ActionController::Base.__route_list__","title":"<code>.__route_list__</code>","text":"View source"},{"location":"Base/#ActionController::Base.__yield__(inst,&)","title":"<code>.__yield__</code>","text":"View source"},{"location":"Base/#ActionController::Base.extract_params(context)","title":"<code>.extract_params(context : HTTP::Server::Context) : URI::Params</code>","text":"<p>Extracts query and route params into a single <code>URI::Params</code> instance</p> View source"},{"location":"Base/#ActionController::Base-methods","title":"Methods","text":""},{"location":"Base/#ActionController::Base#__cookies__","title":"<code>#__cookies__ : HTTP::Cookies | ::Nil</code>","text":"View source"},{"location":"Base/#ActionController::Base#__session__","title":"<code>#__session__ : Session | ::Nil</code>","text":"View source"},{"location":"Base/#ActionController::Base#action_name","title":"<code>#action_name : Symbol</code>","text":"View source"},{"location":"Base/#ActionController::Base#client_ip","title":"<code>#client_ip : String</code>","text":"View source"},{"location":"Base/#ActionController::Base#context","title":"<code>#context</code>","text":"View source"},{"location":"Base/#ActionController::Base#cookies","title":"<code>#cookies : HTTP::Cookies</code>","text":"View source"},{"location":"Base/#ActionController::Base#files","title":"<code>#files : Hash(String, Array(ActionController::BodyParser::FileUpload)) | ::Nil</code>","text":"View source"},{"location":"Base/#ActionController::Base#form_data","title":"<code>#form_data</code>","text":"View source"},{"location":"Base/#ActionController::Base#params","title":"<code>#params : URI::Params</code>","text":"View source"},{"location":"Base/#ActionController::Base#query_params(*,**)","title":"<code>#query_params(*args, **options)</code>","text":"View source"},{"location":"Base/#ActionController::Base#query_params(*,**,&)","title":"<code>#query_params</code>","text":"View source"},{"location":"Base/#ActionController::Base#render_called","title":"<code>#render_called : Bool</code>","text":"View source"},{"location":"Base/#ActionController::Base#request(*,**)","title":"<code>#request(*args, **options)</code>","text":"View source"},{"location":"Base/#ActionController::Base#request(*,**,&)","title":"<code>#request</code>","text":"View source"},{"location":"Base/#ActionController::Base#request_content_type","title":"<code>#request_content_type : String | ::Nil</code>","text":"View source"},{"location":"Base/#ActionController::Base#request_protocol","title":"<code>#request_protocol</code>","text":"<p>=============== Helper methods: ===============</p> View source"},{"location":"Base/#ActionController::Base#response(*,**)","title":"<code>#response(*args, **options)</code>","text":"View source"},{"location":"Base/#ActionController::Base#response(*,**,&)","title":"<code>#response</code>","text":"View source"},{"location":"Base/#ActionController::Base#route_params(*,**)","title":"<code>#route_params(*args, **options)</code>","text":"View source"},{"location":"Base/#ActionController::Base#route_params(*,**,&)","title":"<code>#route_params</code>","text":"View source"},{"location":"Base/#ActionController::Base#session","title":"<code>#session : Session</code>","text":"View source"},{"location":"Base/#ActionController::Base-macros","title":"Macros","text":""},{"location":"Base/#ActionController::Base:__build_filter_inheritance_macros__","title":"<code>__build_filter_inheritance_macros__</code>","text":"View source"},{"location":"Base/#ActionController::Base:__build_filter_mappings__","title":"<code>__build_filter_mappings__</code>","text":"View source"},{"location":"Base/#ActionController::Base:__create_route_methods__","title":"<code>__create_route_methods__</code>","text":"View source"},{"location":"Base/#ActionController::Base:__define_filter_macro__(name,store,method)","title":"<code>__define_filter_macro__(name, store, method = nil)</code>","text":"View source"},{"location":"Base/#ActionController::Base:__draw_routes__","title":"<code>__draw_routes__</code>","text":"View source"},{"location":"Base/#ActionController::Base:after_action(method,only,except)","title":"<code>after_action(method, only = nil, except = nil)</code>","text":"View source"},{"location":"Base/#ActionController::Base:around_action(method,only,except)","title":"<code>around_action(method, only = nil, except = nil)</code>","text":"View source"},{"location":"Base/#ActionController::Base:base(name)","title":"<code>base(name = nil)</code>","text":"View source"},{"location":"Base/#ActionController::Base:before_action(method,only,except)","title":"<code>before_action(method, only = nil, except = nil)</code>","text":"View source"},{"location":"Base/#ActionController::Base:delete(path,function,annotations,reference,&)","title":"<code>delete(path, function = nil, annotations = nil, reference = nil</code>","text":"View source"},{"location":"Base/#ActionController::Base:force_ssl(only,except)","title":"<code>force_ssl(only = nil, except = nil)</code>","text":"View source"},{"location":"Base/#ActionController::Base:force_tls(only,except)","title":"<code>force_tls(only = nil, except = nil)</code>","text":"View source"},{"location":"Base/#ActionController::Base:get(path,function,annotations,reference,&)","title":"<code>get(path, function = nil, annotations = nil, reference = nil</code>","text":"View source"},{"location":"Base/#ActionController::Base:id_param(id)","title":"<code>id_param(id)</code>","text":"View source"},{"location":"Base/#ActionController::Base:layout(filename)","title":"<code>layout(filename = nil)</code>","text":"View source"},{"location":"Base/#ActionController::Base:options(path,function,annotations,reference,&)","title":"<code>options(path, function = nil, annotations = nil, reference = nil</code>","text":"View source"},{"location":"Base/#ActionController::Base:partial(partial,io)","title":"<code>partial(partial, io = nil)</code>","text":"View source"},{"location":"Base/#ActionController::Base:patch(path,function,annotations,reference,&)","title":"<code>patch(path, function = nil, annotations = nil, reference = nil</code>","text":"View source"},{"location":"Base/#ActionController::Base:post(path,function,annotations,reference,&)","title":"<code>post(path, function = nil, annotations = nil, reference = nil</code>","text":"View source"},{"location":"Base/#ActionController::Base:put(path,function,annotations,reference,&)","title":"<code>put(path, function = nil, annotations = nil, reference = nil</code>","text":"View source"},{"location":"Base/#ActionController::Base:rescue_from(error_class,method,&)","title":"<code>rescue_from(error_class, method = nil</code>","text":"View source"},{"location":"Base/#ActionController::Base:skip_action(method,only,except)","title":"<code>skip_action(method, only = nil, except = nil)</code>","text":"View source"},{"location":"Base/#ActionController::Base:template(template,partial,layout,io)","title":"<code>template(template = nil, partial = nil, layout = nil, io = nil)</code>","text":"View source"},{"location":"Base/#ActionController::Base:template_path(path)","title":"<code>template_path(path)</code>","text":"View source"},{"location":"Base/#ActionController::Base:ws(path,function,annotations,reference,&)","title":"<code>ws(path, function = nil, annotations = nil, reference = nil</code>","text":"View source"},{"location":"BodyParser/","title":"Index","text":""},{"location":"BodyParser/#ActionController::BodyParser","title":"module <code>ActionController::BodyParser</code>","text":""},{"location":"BodyParser/#ActionController::BodyParser-constants","title":"Constants","text":""},{"location":"BodyParser/#ActionController::BodyParser::CONTENT_TYPES","title":"<code>CONTENT_TYPES = {\"application/x-www-form-urlencoded\": :url_encoded_form, \"application/x-url-encoded\": :url_encoded_form, \"multipart/form-data\": :multipart_form}</code>","text":""},{"location":"BodyParser/#ActionController::BodyParser-class-methods","title":"Class methods","text":""},{"location":"BodyParser/#ActionController::BodyParser.extract_form_data(request,content_type,params)","title":"<code>.extract_form_data(request, content_type, params : HTTP::Params)</code>","text":"<p>ameba:disable Metrics/CyclomaticComplexity</p> View source"},{"location":"BodyParser/FileUpload/","title":"Index","text":""},{"location":"BodyParser/FileUpload/#ActionController::BodyParser::FileUpload","title":"struct <code>ActionController::BodyParser::FileUpload</code> inherits <code>Struct</code>","text":""},{"location":"BodyParser/FileUpload/#ActionController::BodyParser::FileUpload-constructors","title":"Constructors","text":""},{"location":"BodyParser/FileUpload/#ActionController::BodyParser::FileUpload.new(name,headers,io)","title":"<code>.new(name : String, headers : HTTP::Headers, io : IO)</code>","text":"View source"},{"location":"BodyParser/FileUpload/#ActionController::BodyParser::FileUpload.new(part)","title":"<code>.new(part : HTTP::FormData::Part)</code>","text":"View source"},{"location":"BodyParser/FileUpload/#ActionController::BodyParser::FileUpload-methods","title":"Methods","text":""},{"location":"BodyParser/FileUpload/#ActionController::BodyParser::FileUpload#body","title":"<code>#body : IO</code>","text":"View source"},{"location":"BodyParser/FileUpload/#ActionController::BodyParser::FileUpload#creation_time","title":"<code>#creation_time : Time | ::Nil</code>","text":"View source"},{"location":"BodyParser/FileUpload/#ActionController::BodyParser::FileUpload#filename","title":"<code>#filename : String | ::Nil</code>","text":"View source"},{"location":"BodyParser/FileUpload/#ActionController::BodyParser::FileUpload#headers","title":"<code>#headers : HTTP::Headers</code>","text":"View source"},{"location":"BodyParser/FileUpload/#ActionController::BodyParser::FileUpload#modification_time","title":"<code>#modification_time : Time | ::Nil</code>","text":"View source"},{"location":"BodyParser/FileUpload/#ActionController::BodyParser::FileUpload#name","title":"<code>#name : String</code>","text":"View source"},{"location":"BodyParser/FileUpload/#ActionController::BodyParser::FileUpload#read_time","title":"<code>#read_time : Time | ::Nil</code>","text":"View source"},{"location":"BodyParser/FileUpload/#ActionController::BodyParser::FileUpload#size","title":"<code>#size : UInt64 | ::Nil</code>","text":"View source"},{"location":"Config/environment/","title":"Source Documentation","text":""},{"location":"Config/environment/#ActionController","title":"module <code>ActionController</code>","text":""},{"location":"Config/environment/#ActionController-constants","title":"Constants","text":""},{"location":"Config/environment/#ActionController::Log","title":"<code>Log = ::Log.for(\"action-controller\")</code>","text":""},{"location":"Config/environment/#ActionController::VERSION","title":"<code>VERSION = \"5.1.2\"</code>","text":""},{"location":"Config/environment/#ActionController-class-methods","title":"Class methods","text":""},{"location":"Config/environment/#ActionController.default_backend(io,formatter)","title":"<code>.default_backend(io = STDOUT, formatter = default_formatter)</code>","text":"View source"},{"location":"Config/environment/#ActionController.default_formatter","title":"<code>.default_formatter</code>","text":"View source"},{"location":"Config/environment/#ActionController.json_formatter","title":"<code>.json_formatter</code>","text":"View source"},{"location":"Config/environment/#ActionController.log_metadata_to_raw(metadata)","title":"<code>.log_metadata_to_raw(metadata)</code>","text":"View source"},{"location":"CookieSizeExceeded/","title":"Index","text":""},{"location":"CookieSizeExceeded/#ActionController::CookieSizeExceeded","title":"class <code>ActionController::CookieSizeExceeded</code> inherits <code>ActionController::Error</code>","text":""},{"location":"Error/","title":"Errors","text":""},{"location":"Error/#ActionController::Error","title":"class <code>ActionController::Error</code> inherits <code>Exception</code>","text":"Direct known subclasses <code>ActionController::CookieSizeExceeded</code> <code>ActionController::InvalidRoute</code> <code>ActionController::InvalidSignature</code>"},{"location":"ErrorHandler/","title":"Index","text":""},{"location":"ErrorHandler/#ActionController::ErrorHandler","title":"module <code>ActionController::ErrorHandler</code>","text":""},{"location":"ErrorHandler/#ActionController::ErrorHandler-constructors","title":"Constructors","text":""},{"location":"ErrorHandler/#ActionController::ErrorHandler.new(production,persist_headers)","title":"<code>.new(production : Bool = false, persist_headers = [] of String)</code>","text":"View source"},{"location":"ErrorHandlerBase/","title":"Index","text":""},{"location":"ErrorHandlerBase/#ActionController::ErrorHandlerBase","title":"module <code>ActionController::ErrorHandlerBase</code>","text":"Direct including types <code>ActionController::ErrorHandlerDevelopment</code> <code>ActionController::ErrorHandlerProduction</code>"},{"location":"ErrorHandlerBase/#ActionController::ErrorHandlerBase-constants","title":"Constants","text":""},{"location":"ErrorHandlerBase/#ActionController::ErrorHandlerBase::ACCEPT_SEPARATOR_REGEX","title":"<code>ACCEPT_SEPARATOR_REGEX = /,\\s*/</code>","text":""},{"location":"ErrorHandlerBase/#ActionController::ErrorHandlerBase-constructors","title":"Constructors","text":""},{"location":"ErrorHandlerBase/#ActionController::ErrorHandlerBase.new(headers)","title":"<code>.new(headers : Array(String))</code>","text":"View source"},{"location":"ErrorHandlerBase/#ActionController::ErrorHandlerBase-methods","title":"Methods","text":""},{"location":"ErrorHandlerBase/#ActionController::ErrorHandlerBase#accepts_formats(request)","title":"<code>#accepts_formats(request)</code>","text":"View source"},{"location":"ErrorHandlerBase/#ActionController::ErrorHandlerBase#reset(response)","title":"<code>#reset(response)</code>","text":"View source"},{"location":"ErrorHandlerDevelopment/","title":"Index","text":""},{"location":"ErrorHandlerDevelopment/#ActionController::ErrorHandlerDevelopment","title":"class <code>ActionController::ErrorHandlerDevelopment</code> inherits <code>Reference</code>","text":"Included modules <code>ActionController::ErrorHandlerBase</code> <code>HTTP::Handler</code>"},{"location":"ErrorHandlerDevelopment/#ActionController::ErrorHandlerDevelopment-methods","title":"Methods","text":""},{"location":"ErrorHandlerDevelopment/#ActionController::ErrorHandlerDevelopment#call(context)","title":"<code>#call(context)</code>","text":"View source"},{"location":"ErrorHandlerProduction/","title":"Index","text":""},{"location":"ErrorHandlerProduction/#ActionController::ErrorHandlerProduction","title":"class <code>ActionController::ErrorHandlerProduction</code> inherits <code>Reference</code>","text":"Included modules <code>ActionController::ErrorHandlerBase</code> <code>HTTP::Handler</code>"},{"location":"ErrorHandlerProduction/#ActionController::ErrorHandlerProduction-methods","title":"Methods","text":""},{"location":"ErrorHandlerProduction/#ActionController::ErrorHandlerProduction#call(context)","title":"<code>#call(context)</code>","text":"View source"},{"location":"ExceptionPage/","title":"Index","text":""},{"location":"ExceptionPage/#ActionController::ExceptionPage","title":"class <code>ActionController::ExceptionPage</code> inherits <code>ExceptionPage</code>","text":""},{"location":"ExceptionPage/#ActionController::ExceptionPage-methods","title":"Methods","text":""},{"location":"ExceptionPage/#ActionController::ExceptionPage#styles","title":"<code>#styles : Styles</code>","text":"View source"},{"location":"FileHandler/","title":"Index","text":""},{"location":"FileHandler/#ActionController::FileHandler","title":"class <code>ActionController::FileHandler</code> inherits <code>HTTP::StaticFileHandler</code>","text":"<p>This is deprecated in favour of the built in MIME store and handlers this is updated to provide compatibility but will be removed in the future</p>"},{"location":"FileHandler/MIME_TYPES/","title":"Index","text":""},{"location":"FileHandler/MIME_TYPES/#ActionController::FileHandler::MIME_TYPES","title":"class <code>ActionController::FileHandler::MIME_TYPES</code> inherits <code>Reference</code>","text":""},{"location":"FileHandler/MIME_TYPES/#ActionController::FileHandler::MIME_TYPES-class-methods","title":"Class methods","text":""},{"location":"FileHandler/MIME_TYPES/#ActionController::FileHandler::MIME_TYPES.[]=(key,value)","title":"<code>.[]=(key, value)</code>","text":"View source"},{"location":"InvalidRoute/","title":"Index","text":""},{"location":"InvalidRoute/#ActionController::InvalidRoute","title":"class <code>ActionController::InvalidRoute</code> inherits <code>ActionController::Error</code>","text":""},{"location":"InvalidSignature/","title":"Index","text":""},{"location":"InvalidSignature/#ActionController::InvalidSignature","title":"class <code>ActionController::InvalidSignature</code> inherits <code>ActionController::Error</code>","text":""},{"location":"LogHandler/","title":"Index","text":""},{"location":"LogHandler/#ActionController::LogHandler","title":"class <code>ActionController::LogHandler</code> inherits <code>Reference</code>","text":"<p>A handler that logs the request method, resource, status code, and the time taken to execute.</p> Included modules <code>HTTP::Handler</code>"},{"location":"LogHandler/#ActionController::LogHandler-constructors","title":"Constructors","text":""},{"location":"LogHandler/#ActionController::LogHandler.new(filter,log,ms,generate_id)","title":"<code>.new(filter : Array(String) = [] of String, log : ActionController::LogHandler::Event = Event::Response, ms : Bool = false, generate_id : Bool = true)</code>","text":"<p>Creates a new <code>LogHandler</code> for inserting into middlewhere.</p> <p>Use filter to specified any keys that may appear in request params that should be redacted prior to passing to the logging backend. This may include secrets or PII that should not leave the bounds of this system.</p> <p>log can be used to specify what sections of the request lifecycle to log. The defaults to the response (either valid or error) only, however support is also provide for request entry logging for development environments.</p> <p>By default, request times will include a unit. Set ms to instead always use milliseconds for simpler external perf monitoring.</p> View source"},{"location":"LogHandler/#ActionController::LogHandler-methods","title":"Methods","text":""},{"location":"LogHandler/#ActionController::LogHandler#call(context)","title":"<code>#call(context : HTTP::Server::Context) : Nil</code>","text":"View source"},{"location":"LogHandler/Event/","title":"Index","text":""},{"location":"LogHandler/Event/#ActionController::LogHandler::Event","title":"enum <code>ActionController::LogHandler::Event</code>","text":"<p>Events that occur within the request lifecycle.</p>"},{"location":"LogHandler/Event/#ActionController::LogHandler::Event-members","title":"Members","text":""},{"location":"LogHandler/Event/#ActionController::LogHandler::Event::Request","title":"<code>Request = 1</code>","text":""},{"location":"LogHandler/Event/#ActionController::LogHandler::Event::Response","title":"<code>Response = 2</code>","text":""},{"location":"LogHandler/Event/#ActionController::LogHandler::Event::None","title":"<code>None = 0</code>","text":""},{"location":"LogHandler/Event/#ActionController::LogHandler::Event::All","title":"<code>All = 3</code>","text":""},{"location":"LogHandler/Event/#ActionController::LogHandler::Event-class-methods","title":"Class methods","text":""},{"location":"LogHandler/Event/#ActionController::LogHandler::Event.all","title":"<code>.all</code>","text":"View source"},{"location":"LogHandler/Event/#ActionController::LogHandler::Event-methods","title":"Methods","text":""},{"location":"LogHandler/Event/#ActionController::LogHandler::Event#none?","title":"<code>#none?</code>","text":"View source"},{"location":"LogHandler/Event/#ActionController::LogHandler::Event#request?","title":"<code>#request?</code>","text":"View source"},{"location":"LogHandler/Event/#ActionController::LogHandler::Event#response?","title":"<code>#response?</code>","text":"View source"},{"location":"MessageEncryptor/","title":"Index","text":""},{"location":"MessageEncryptor/#ActionController::MessageEncryptor","title":"class <code>ActionController::MessageEncryptor</code> inherits <code>Reference</code>","text":""},{"location":"MessageEncryptor/#ActionController::MessageEncryptor-constructors","title":"Constructors","text":""},{"location":"MessageEncryptor/#ActionController::MessageEncryptor.new(secret,cipher_algorithm,digest)","title":"<code>.new(secret : String, cipher_algorithm : String = \"aes-256-cbc\", digest : OpenSSL::Algorithm = :sha1)</code>","text":"View source"},{"location":"MessageEncryptor/#ActionController::MessageEncryptor-methods","title":"Methods","text":""},{"location":"MessageEncryptor/#ActionController::MessageEncryptor#decrypt(value)","title":"<code>#decrypt(value : Bytes)</code>","text":"View source"},{"location":"MessageEncryptor/#ActionController::MessageEncryptor#encrypt(value)","title":"<code>#encrypt(value)</code>","text":"View source"},{"location":"MessageEncryptor/#ActionController::MessageEncryptor#encrypt_and_sign(value)","title":"<code>#encrypt_and_sign(value : Slice(UInt8)) : String</code>","text":"<p>Encrypt and sign a message. We need to sign the message in order to avoid padding attacks. Reference: http://www.limited-entropy.com/padding-oracle-attacks.</p> View source"},{"location":"MessageEncryptor/#ActionController::MessageEncryptor#encrypt_and_sign(value)","title":"<code>#encrypt_and_sign(value : String) : String</code>","text":"View source"},{"location":"MessageEncryptor/#ActionController::MessageEncryptor#extract(value)","title":"<code>#extract(value)</code>","text":"View source"},{"location":"MessageEncryptor/#ActionController::MessageEncryptor#prepare(value)","title":"<code>#prepare(value)</code>","text":"View source"},{"location":"MessageEncryptor/#ActionController::MessageEncryptor#verifier","title":"<code>#verifier : MessageVerifier</code>","text":"View source"},{"location":"MessageEncryptor/#ActionController::MessageEncryptor#verify_and_decrypt(value)","title":"<code>#verify_and_decrypt(value : String) : String</code>","text":"<p>Verify and Decrypt a message. We need to verify the message in order to avoid padding attacks. Reference: http://www.limited-entropy.com/padding-oracle-attacks.</p> View source"},{"location":"MessageVerifier/","title":"Index","text":""},{"location":"MessageVerifier/#ActionController::MessageVerifier","title":"class <code>ActionController::MessageVerifier</code> inherits <code>Reference</code>","text":""},{"location":"MessageVerifier/#ActionController::MessageVerifier-constructors","title":"Constructors","text":""},{"location":"MessageVerifier/#ActionController::MessageVerifier.new(secret,digest)","title":"<code>.new(secret : String, digest : OpenSSL::Algorithm = :sha1)</code>","text":"View source"},{"location":"MessageVerifier/#ActionController::MessageVerifier-methods","title":"Methods","text":""},{"location":"MessageVerifier/#ActionController::MessageVerifier#extract(value)","title":"<code>#extract(value)</code>","text":"View source"},{"location":"MessageVerifier/#ActionController::MessageVerifier#generate(value)","title":"<code>#generate(value : String | Bytes)</code>","text":"View source"},{"location":"MessageVerifier/#ActionController::MessageVerifier#prepare(value)","title":"<code>#prepare(value)</code>","text":"View source"},{"location":"MessageVerifier/#ActionController::MessageVerifier#valid_message?(data,digest)","title":"<code>#valid_message?(data, digest)</code>","text":"View source"},{"location":"MessageVerifier/#ActionController::MessageVerifier#verified(signed_message)","title":"<code>#verified(signed_message : String)</code>","text":"View source"},{"location":"MessageVerifier/#ActionController::MessageVerifier#verify(signed_message)","title":"<code>#verify(signed_message) : String</code>","text":"View source"},{"location":"MessageVerifier/#ActionController::MessageVerifier#verify_raw(signed_message)","title":"<code>#verify_raw(signed_message : String) : Bytes</code>","text":"View source"},{"location":"Responders/","title":"Responders","text":""},{"location":"Responders/#ActionController::Responders","title":"module <code>ActionController::Responders</code>","text":"Direct including types <code>ActionController::Base</code>"},{"location":"Responders/#ActionController::Responders-constants","title":"Constants","text":""},{"location":"Responders/#ActionController::Responders::ACCEPT_SEPARATOR_REGEX","title":"<code>ACCEPT_SEPARATOR_REGEX = /,\\s*/</code>","text":""},{"location":"Responders/#ActionController::Responders::MIME_TYPES","title":"<code>MIME_TYPES = {binary: \"application/octet-stream\", json: \"application/json\", xml: \"application/xml\", text: \"text/plain\", html: \"text/html\", yaml: \"text/yaml\"}</code>","text":""},{"location":"Responders/#ActionController::Responders::REDIRECTION_CODES","title":"<code>REDIRECTION_CODES = {multiple_choices: 300, moved_permanently: 301, found: 302, see_other: 303, not_modified: 304, use_proxy: 305, temporary_redirect: 307, permanent_redirect: 308}</code>","text":""},{"location":"Responders/#ActionController::Responders::STATUS_CODES","title":"<code>STATUS_CODES = {continue: 100, switching_protocols: 101, processing: 102, ok: 200, created: 201, accepted: 202, non_authoritative_information: 203, no_content: 204, reset_content: 205, partial_content: 206, multi_status: 207, already_reported: 208, im_used: 226, bad_request: 400, unauthorized: 401, payment_required: 402, forbidden: 403, not_found: 404, method_not_allowed: 405, not_acceptable: 406, proxy_authentication_required: 407, request_timeout: 408, conflict: 409, gone: 410, length_required: 411, precondition_failed: 412, payload_too_large: 413, uri_too_long: 414, unsupported_media_type: 415, range_not_satisfiable: 416, expectation_failed: 417, misdirected_request: 421, unprocessable_entity: 422, locked: 423, failed_dependency: 424, upgrade_required: 426, precondition_required: 428, too_many_requests: 429, request_header_fields_too_large: 431, unavailable_for_legal_reasons: 451, internal_server_error: 500, not_implemented: 501, bad_gateway: 502, service_unavailable: 503, gateway_timeout: 504, http_version_not_supported: 505, variant_also_negotiates: 506, insufficient_storage: 507, loop_detected: 508, not_extended: 510, network_authentication_required: 511}</code>","text":""},{"location":"Responders/#ActionController::Responders-methods","title":"Methods","text":""},{"location":"Responders/#ActionController::Responders#accepts_formats","title":"<code>#accepts_formats</code>","text":"<p>Extracts the mime types from the Accept header</p> View source"},{"location":"Responders/#ActionController::Responders-macros","title":"Macros","text":""},{"location":"Responders/#ActionController::Responders:head(status)","title":"<code>head(status)</code>","text":"View source"},{"location":"Responders/#ActionController::Responders:redirect_to(path,status)","title":"<code>redirect_to(path, status = :found)</code>","text":"View source"},{"location":"Responders/#ActionController::Responders:render(status,head,json,yaml,xml,html,text,binary,template,partial,layout)","title":"<code>render(status = :ok, head = nil, json = nil, yaml = nil, xml = nil, html = nil, text = nil, binary = nil, template = nil, partial = nil, layout = nil)</code>","text":"View source"},{"location":"Responders/#ActionController::Responders:respond_with(status,&)","title":"<code>respond_with(status = :ok</code>","text":"View source"},{"location":"Responders/SelectResponse/","title":"Index","text":""},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse","title":"class <code>ActionController::Responders::SelectResponse</code> inherits <code>Reference</code>","text":"<p>Helper class for selecting the response to render / execute</p>"},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse-constants","title":"Constants","text":""},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse::ACCEPTED_FORMATS","title":"<code>ACCEPTED_FORMATS = {\"text/html\": :html, \"application/xml\": :xml, \"text/xml\": :xml, \"application/json\": :json, \"text/plain\": :text, \"application/octet-stream\": :binary, \"text/yaml\": :yaml, \"text/x-yaml\": :yaml, \"application/yaml\": :yaml, \"application/x-yaml\": :yaml}</code>","text":""},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse-constructors","title":"Constructors","text":""},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse.new(response,formats,head_request)","title":"<code>.new(response : HTTP::Server::Response, formats, head_request : Bool)</code>","text":"View source"},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse-class-methods","title":"Class methods","text":""},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse.accepts(accepts_formats)","title":"<code>.accepts(accepts_formats)</code>","text":"<p>Creates an ordered list of supported formats with requested mime types</p> View source"},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse-methods","title":"Methods","text":""},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse#build_response","title":"<code>#build_response</code>","text":"<p>Respond appropriately</p> View source"},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse#options","title":"<code>#options</code>","text":"View source"},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse#responses(&)","title":"<code>#responses</code>","text":"<p>Build a list of possible responses to the request</p> View source"},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse-macros","title":"Macros","text":""},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse:binary(obj,&)","title":"<code>binary(obj = nil</code>","text":"View source"},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse:html(obj,&)","title":"<code>html(obj = nil</code>","text":"View source"},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse:json(obj,&)","title":"<code>json(obj = nil</code>","text":"View source"},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse:text(obj,&)","title":"<code>text(obj = nil</code>","text":"View source"},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse:xml(obj,&)","title":"<code>xml(obj = nil</code>","text":"View source"},{"location":"Responders/SelectResponse/#ActionController::Responders::SelectResponse:yaml(obj,&)","title":"<code>yaml(obj = nil</code>","text":"View source"},{"location":"Route/","title":"Index","text":""},{"location":"Route/#ActionController::Route","title":"module <code>ActionController::Route</code>","text":""},{"location":"Route/Builder/","title":"Index","text":""},{"location":"Route/Builder/#ActionController::Route::Builder","title":"module <code>ActionController::Route::Builder</code>","text":"Direct including types <code>ActionController::Base</code>"},{"location":"Route/Builder/#ActionController::Route::Builder-constants","title":"Constants","text":""},{"location":"Route/Builder/#ActionController::Route::Builder::DEFAULT_PARSER","title":"<code>DEFAULT_PARSER = [\"application/json\"]</code>","text":""},{"location":"Route/Builder/#ActionController::Route::Builder::DEFAULT_RESPONDER","title":"<code>DEFAULT_RESPONDER = [\"application/json\"]</code>","text":""},{"location":"Route/Builder/#ActionController::Route::Builder::PARSERS","title":"<code>PARSERS = {\"application/json\" =&gt; do |klass, body_io| klass.from_json(body_io.gets_to_end)end} of Nil =&gt; Nil</code>","text":""},{"location":"Route/Builder/#ActionController::Route::Builder::RESPONDERS","title":"<code>RESPONDERS = {\"application/json\" =&gt; do |io, result| result.to_json(io)end} of Nil =&gt; Nil</code>","text":""},{"location":"Route/Builder/#ActionController::Route::Builder::ROUTE_FUNCTIONS","title":"<code>ROUTE_FUNCTIONS = {} of Nil =&gt; Nil</code>","text":""},{"location":"Route/Builder/#ActionController::Route::Builder-macros","title":"Macros","text":""},{"location":"Route/Builder/#ActionController::Route::Builder:__build_transformer_functions__","title":"<code>__build_transformer_functions__</code>","text":"View source"},{"location":"Route/Builder/#ActionController::Route::Builder:__parse_inferred_routes__","title":"<code>__parse_inferred_routes__</code>","text":"View source"},{"location":"Route/Builder/#ActionController::Route::Builder:add_parser(content_type,&)","title":"<code>add_parser</code>","text":"View source"},{"location":"Route/Builder/#ActionController::Route::Builder:add_responder(content_type,&)","title":"<code>add_responder</code>","text":"View source"},{"location":"Route/Builder/#ActionController::Route::Builder:default_parser(content_type)","title":"<code>default_parser(content_type)</code>","text":"View source"},{"location":"Route/Builder/#ActionController::Route::Builder:default_responder(content_type)","title":"<code>default_responder(content_type)</code>","text":"View source"},{"location":"Route/DELETE/","title":"Index","text":""},{"location":"Route/DELETE/#ActionController::Route::DELETE","title":"annotation <code>ActionController::Route::DELETE</code>","text":""},{"location":"Route/Error/","title":"Route errors","text":""},{"location":"Route/Error/#ActionController::Route::Error","title":"class <code>ActionController::Route::Error</code> inherits <code>Exception</code>","text":"Direct known subclasses <code>ActionController::Route::NotAcceptable</code> <code>ActionController::Route::UnsupportedMediaType</code>"},{"location":"Route/Error/#ActionController::Route::Error-constructors","title":"Constructors","text":""},{"location":"Route/Error/#ActionController::Route::Error.new(message,accepts)","title":"<code>.new(message : String | Nil = nil, accepts : Array(String) | Nil = nil)</code>","text":"View source"},{"location":"Route/Error/#ActionController::Route::Error-methods","title":"Methods","text":""},{"location":"Route/Error/#ActionController::Route::Error#accepts","title":"<code>#accepts : Array(String) | ::Nil</code>","text":"View source"},{"location":"Route/Exception/","title":"Index","text":""},{"location":"Route/Exception/#ActionController::Route::Exception","title":"annotation <code>ActionController::Route::Exception</code>","text":""},{"location":"Route/Filter/","title":"Index","text":""},{"location":"Route/Filter/#ActionController::Route::Filter","title":"annotation <code>ActionController::Route::Filter</code>","text":""},{"location":"Route/GET/","title":"Index","text":""},{"location":"Route/GET/#ActionController::Route::GET","title":"annotation <code>ActionController::Route::GET</code>","text":""},{"location":"Route/NotAcceptable/","title":"Index","text":""},{"location":"Route/NotAcceptable/#ActionController::Route::NotAcceptable","title":"class <code>ActionController::Route::NotAcceptable</code> inherits <code>ActionController::Route::Error</code>","text":"<p>we don't support any of the accepted response content types</p>"},{"location":"Route/OPTIONS/","title":"Index","text":""},{"location":"Route/OPTIONS/#ActionController::Route::OPTIONS","title":"annotation <code>ActionController::Route::OPTIONS</code>","text":""},{"location":"Route/PATCH/","title":"Index","text":""},{"location":"Route/PATCH/#ActionController::Route::PATCH","title":"annotation <code>ActionController::Route::PATCH</code>","text":""},{"location":"Route/POST/","title":"Index","text":""},{"location":"Route/POST/#ActionController::Route::POST","title":"annotation <code>ActionController::Route::POST</code>","text":""},{"location":"Route/PUT/","title":"Index","text":""},{"location":"Route/PUT/#ActionController::Route::PUT","title":"annotation <code>ActionController::Route::PUT</code>","text":""},{"location":"Route/Param/","title":"Index","text":""},{"location":"Route/Param/#ActionController::Route::Param","title":"module <code>ActionController::Route::Param</code>","text":""},{"location":"Route/Param/Conversion/","title":"Params","text":""},{"location":"Route/Param/Conversion/#ActionController::Route::Param::Conversion","title":"abstract struct <code>ActionController::Route::Param::Conversion</code> inherits <code>Struct</code>","text":"<p>The method for building in support of different route params</p> Direct known subclasses <code>ActionController::Route::Param::ConvertBigDecimal</code> <code>ActionController::Route::Param::ConvertBigFloat</code> <code>ActionController::Route::Param::ConvertBigInt</code> <code>ActionController::Route::Param::ConvertBool</code> <code>ActionController::Route::Param::ConvertChar</code> <code>ActionController::Route::Param::ConvertFloat32</code> <code>ActionController::Route::Param::ConvertFloat64</code> <code>ActionController::Route::Param::ConvertInt128</code> <code>ActionController::Route::Param::ConvertInt16</code> <code>ActionController::Route::Param::ConvertInt32</code> <code>ActionController::Route::Param::ConvertInt64</code> <code>ActionController::Route::Param::ConvertInt8</code> <code>ActionController::Route::Param::ConvertString</code> <code>ActionController::Route::Param::ConvertTime</code> <code>ActionController::Route::Param::ConvertUInt128</code> <code>ActionController::Route::Param::ConvertUInt16</code> <code>ActionController::Route::Param::ConvertUInt32</code> <code>ActionController::Route::Param::ConvertUInt64</code> <code>ActionController::Route::Param::ConvertUInt8</code>"},{"location":"Route/Param/Conversion/#ActionController::Route::Param::Conversion-constructors","title":"Constructors","text":""},{"location":"Route/Param/Conversion/#ActionController::Route::Param::Conversion.new","title":"<code>.new</code>","text":"View source"},{"location":"Route/Param/Conversion/#ActionController::Route::Param::Conversion-methods","title":"Methods","text":""},{"location":"Route/Param/Conversion/#ActionController::Route::Param::Conversion#convert(raw)","title":"abstract <code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/Conversion/#ActionController::Route::Param::Conversion#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Route/Param/ConvertBigDecimal/","title":"Index","text":""},{"location":"Route/Param/ConvertBigDecimal/#ActionController::Route::Param::ConvertBigDecimal","title":"struct <code>ActionController::Route::Param::ConvertBigDecimal</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":"<p>Big converters</p>"},{"location":"Route/Param/ConvertBigDecimal/#ActionController::Route::Param::ConvertBigDecimal-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertBigDecimal/#ActionController::Route::Param::ConvertBigDecimal#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertBigFloat/","title":"Index","text":""},{"location":"Route/Param/ConvertBigFloat/#ActionController::Route::Param::ConvertBigFloat","title":"struct <code>ActionController::Route::Param::ConvertBigFloat</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertBigFloat/#ActionController::Route::Param::ConvertBigFloat-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertBigFloat/#ActionController::Route::Param::ConvertBigFloat#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertBigInt/","title":"Index","text":""},{"location":"Route/Param/ConvertBigInt/#ActionController::Route::Param::ConvertBigInt","title":"struct <code>ActionController::Route::Param::ConvertBigInt</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertBigInt/#ActionController::Route::Param::ConvertBigInt-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertBigInt/#ActionController::Route::Param::ConvertBigInt.new(base)","title":"<code>.new(base : Int32 = 10)</code>","text":"View source"},{"location":"Route/Param/ConvertBigInt/#ActionController::Route::Param::ConvertBigInt-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertBigInt/#ActionController::Route::Param::ConvertBigInt#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertBool/","title":"Index","text":""},{"location":"Route/Param/ConvertBool/#ActionController::Route::Param::ConvertBool","title":"struct <code>ActionController::Route::Param::ConvertBool</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertBool/#ActionController::Route::Param::ConvertBool-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertBool/#ActionController::Route::Param::ConvertBool.new(true_string)","title":"<code>.new(true_string : String = \"true\")</code>","text":"View source"},{"location":"Route/Param/ConvertBool/#ActionController::Route::Param::ConvertBool-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertBool/#ActionController::Route::Param::ConvertBool#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertChar/","title":"Index","text":""},{"location":"Route/Param/ConvertChar/#ActionController::Route::Param::ConvertChar","title":"struct <code>ActionController::Route::Param::ConvertChar</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertChar/#ActionController::Route::Param::ConvertChar-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertChar/#ActionController::Route::Param::ConvertChar#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertFloat32/","title":"Index","text":""},{"location":"Route/Param/ConvertFloat32/#ActionController::Route::Param::ConvertFloat32","title":"struct <code>ActionController::Route::Param::ConvertFloat32</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":"<p>Float converters</p>"},{"location":"Route/Param/ConvertFloat32/#ActionController::Route::Param::ConvertFloat32-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertFloat32/#ActionController::Route::Param::ConvertFloat32.new(whitespace,strict)","title":"<code>.new(whitespace : Bool = true, strict : Bool = true)</code>","text":"View source"},{"location":"Route/Param/ConvertFloat32/#ActionController::Route::Param::ConvertFloat32-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertFloat32/#ActionController::Route::Param::ConvertFloat32#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertFloat64/","title":"Index","text":""},{"location":"Route/Param/ConvertFloat64/#ActionController::Route::Param::ConvertFloat64","title":"struct <code>ActionController::Route::Param::ConvertFloat64</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertFloat64/#ActionController::Route::Param::ConvertFloat64-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertFloat64/#ActionController::Route::Param::ConvertFloat64.new(whitespace,strict)","title":"<code>.new(whitespace : Bool = true, strict : Bool = true)</code>","text":"View source"},{"location":"Route/Param/ConvertFloat64/#ActionController::Route::Param::ConvertFloat64-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertFloat64/#ActionController::Route::Param::ConvertFloat64#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertInt128/","title":"Index","text":""},{"location":"Route/Param/ConvertInt128/#ActionController::Route::Param::ConvertInt128","title":"struct <code>ActionController::Route::Param::ConvertInt128</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertInt128/#ActionController::Route::Param::ConvertInt128-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertInt128/#ActionController::Route::Param::ConvertInt128.new(base,whitespace,underscore,prefix,strict,leading_zero_is_octal)","title":"<code>.new(base : Int32 = 10, whitespace : Bool = true, underscore : Bool = false, prefix : Bool = false, strict : Bool = true, leading_zero_is_octal : Bool = false)</code>","text":"View source"},{"location":"Route/Param/ConvertInt128/#ActionController::Route::Param::ConvertInt128-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertInt128/#ActionController::Route::Param::ConvertInt128#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertInt16/","title":"Index","text":""},{"location":"Route/Param/ConvertInt16/#ActionController::Route::Param::ConvertInt16","title":"struct <code>ActionController::Route::Param::ConvertInt16</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertInt16/#ActionController::Route::Param::ConvertInt16-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertInt16/#ActionController::Route::Param::ConvertInt16.new(base,whitespace,underscore,prefix,strict,leading_zero_is_octal)","title":"<code>.new(base : Int32 = 10, whitespace : Bool = true, underscore : Bool = false, prefix : Bool = false, strict : Bool = true, leading_zero_is_octal : Bool = false)</code>","text":"View source"},{"location":"Route/Param/ConvertInt16/#ActionController::Route::Param::ConvertInt16-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertInt16/#ActionController::Route::Param::ConvertInt16#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertInt32/","title":"Index","text":""},{"location":"Route/Param/ConvertInt32/#ActionController::Route::Param::ConvertInt32","title":"struct <code>ActionController::Route::Param::ConvertInt32</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertInt32/#ActionController::Route::Param::ConvertInt32-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertInt32/#ActionController::Route::Param::ConvertInt32.new(base,whitespace,underscore,prefix,strict,leading_zero_is_octal)","title":"<code>.new(base : Int32 = 10, whitespace : Bool = true, underscore : Bool = false, prefix : Bool = false, strict : Bool = true, leading_zero_is_octal : Bool = false)</code>","text":"View source"},{"location":"Route/Param/ConvertInt32/#ActionController::Route::Param::ConvertInt32-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertInt32/#ActionController::Route::Param::ConvertInt32#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertInt64/","title":"Index","text":""},{"location":"Route/Param/ConvertInt64/#ActionController::Route::Param::ConvertInt64","title":"struct <code>ActionController::Route::Param::ConvertInt64</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertInt64/#ActionController::Route::Param::ConvertInt64-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertInt64/#ActionController::Route::Param::ConvertInt64.new(base,whitespace,underscore,prefix,strict,leading_zero_is_octal)","title":"<code>.new(base : Int32 = 10, whitespace : Bool = true, underscore : Bool = false, prefix : Bool = false, strict : Bool = true, leading_zero_is_octal : Bool = false)</code>","text":"View source"},{"location":"Route/Param/ConvertInt64/#ActionController::Route::Param::ConvertInt64-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertInt64/#ActionController::Route::Param::ConvertInt64#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertInt8/","title":"Index","text":""},{"location":"Route/Param/ConvertInt8/#ActionController::Route::Param::ConvertInt8","title":"struct <code>ActionController::Route::Param::ConvertInt8</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":"<p>Integer converters</p>"},{"location":"Route/Param/ConvertInt8/#ActionController::Route::Param::ConvertInt8-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertInt8/#ActionController::Route::Param::ConvertInt8.new(base,whitespace,underscore,prefix,strict,leading_zero_is_octal)","title":"<code>.new(base : Int32 = 10, whitespace : Bool = true, underscore : Bool = false, prefix : Bool = false, strict : Bool = true, leading_zero_is_octal : Bool = false)</code>","text":"View source"},{"location":"Route/Param/ConvertInt8/#ActionController::Route::Param::ConvertInt8-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertInt8/#ActionController::Route::Param::ConvertInt8#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertString/","title":"Index","text":""},{"location":"Route/Param/ConvertString/#ActionController::Route::Param::ConvertString","title":"struct <code>ActionController::Route::Param::ConvertString</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertString/#ActionController::Route::Param::ConvertString-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertString/#ActionController::Route::Param::ConvertString#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertTime/","title":"Index","text":""},{"location":"Route/Param/ConvertTime/#ActionController::Route::Param::ConvertTime","title":"struct <code>ActionController::Route::Param::ConvertTime</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertTime/#ActionController::Route::Param::ConvertTime-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertTime/#ActionController::Route::Param::ConvertTime.new(format)","title":"<code>.new(format : String | Nil = nil)</code>","text":"View source"},{"location":"Route/Param/ConvertTime/#ActionController::Route::Param::ConvertTime-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertTime/#ActionController::Route::Param::ConvertTime#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertUInt128/","title":"Index","text":""},{"location":"Route/Param/ConvertUInt128/#ActionController::Route::Param::ConvertUInt128","title":"struct <code>ActionController::Route::Param::ConvertUInt128</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertUInt128/#ActionController::Route::Param::ConvertUInt128-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertUInt128/#ActionController::Route::Param::ConvertUInt128.new(base,whitespace,underscore,prefix,strict,leading_zero_is_octal)","title":"<code>.new(base : Int32 = 10, whitespace : Bool = true, underscore : Bool = false, prefix : Bool = false, strict : Bool = true, leading_zero_is_octal : Bool = false)</code>","text":"View source"},{"location":"Route/Param/ConvertUInt128/#ActionController::Route::Param::ConvertUInt128-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertUInt128/#ActionController::Route::Param::ConvertUInt128#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertUInt16/","title":"Index","text":""},{"location":"Route/Param/ConvertUInt16/#ActionController::Route::Param::ConvertUInt16","title":"struct <code>ActionController::Route::Param::ConvertUInt16</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertUInt16/#ActionController::Route::Param::ConvertUInt16-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertUInt16/#ActionController::Route::Param::ConvertUInt16.new(base,whitespace,underscore,prefix,strict,leading_zero_is_octal)","title":"<code>.new(base : Int32 = 10, whitespace : Bool = true, underscore : Bool = false, prefix : Bool = false, strict : Bool = true, leading_zero_is_octal : Bool = false)</code>","text":"View source"},{"location":"Route/Param/ConvertUInt16/#ActionController::Route::Param::ConvertUInt16-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertUInt16/#ActionController::Route::Param::ConvertUInt16#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertUInt32/","title":"Index","text":""},{"location":"Route/Param/ConvertUInt32/#ActionController::Route::Param::ConvertUInt32","title":"struct <code>ActionController::Route::Param::ConvertUInt32</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertUInt32/#ActionController::Route::Param::ConvertUInt32-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertUInt32/#ActionController::Route::Param::ConvertUInt32.new(base,whitespace,underscore,prefix,strict,leading_zero_is_octal)","title":"<code>.new(base : Int32 = 10, whitespace : Bool = true, underscore : Bool = false, prefix : Bool = false, strict : Bool = true, leading_zero_is_octal : Bool = false)</code>","text":"View source"},{"location":"Route/Param/ConvertUInt32/#ActionController::Route::Param::ConvertUInt32-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertUInt32/#ActionController::Route::Param::ConvertUInt32#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertUInt64/","title":"Index","text":""},{"location":"Route/Param/ConvertUInt64/#ActionController::Route::Param::ConvertUInt64","title":"struct <code>ActionController::Route::Param::ConvertUInt64</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertUInt64/#ActionController::Route::Param::ConvertUInt64-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertUInt64/#ActionController::Route::Param::ConvertUInt64.new(base,whitespace,underscore,prefix,strict,leading_zero_is_octal)","title":"<code>.new(base : Int32 = 10, whitespace : Bool = true, underscore : Bool = false, prefix : Bool = false, strict : Bool = true, leading_zero_is_octal : Bool = false)</code>","text":"View source"},{"location":"Route/Param/ConvertUInt64/#ActionController::Route::Param::ConvertUInt64-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertUInt64/#ActionController::Route::Param::ConvertUInt64#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/ConvertUInt8/","title":"Index","text":""},{"location":"Route/Param/ConvertUInt8/#ActionController::Route::Param::ConvertUInt8","title":"struct <code>ActionController::Route::Param::ConvertUInt8</code> inherits <code>ActionController::Route::Param::Conversion</code>","text":""},{"location":"Route/Param/ConvertUInt8/#ActionController::Route::Param::ConvertUInt8-constructors","title":"Constructors","text":""},{"location":"Route/Param/ConvertUInt8/#ActionController::Route::Param::ConvertUInt8.new(base,whitespace,underscore,prefix,strict,leading_zero_is_octal)","title":"<code>.new(base : Int32 = 10, whitespace : Bool = true, underscore : Bool = false, prefix : Bool = false, strict : Bool = true, leading_zero_is_octal : Bool = false)</code>","text":"View source"},{"location":"Route/Param/ConvertUInt8/#ActionController::Route::Param::ConvertUInt8-methods","title":"Methods","text":""},{"location":"Route/Param/ConvertUInt8/#ActionController::Route::Param::ConvertUInt8#convert(raw)","title":"<code>#convert(raw : String)</code>","text":"<p>convert should typically return nil if the conversion failed this allows support for Union types, however may not be practical or desirable for most.</p> <p>Nilable Unions against a single type that raises an error is supported</p> View source"},{"location":"Route/Param/Error/","title":"Param errors","text":""},{"location":"Route/Param/Error/#ActionController::Route::Param::Error","title":"class <code>ActionController::Route::Param::Error</code> inherits <code>ArgumentError</code>","text":"<p>Handle this to return a 404</p> Direct known subclasses <code>ActionController::Route::Param::MissingError</code> <code>ActionController::Route::Param::ValueError</code>"},{"location":"Route/Param/Error/#ActionController::Route::Param::Error-constructors","title":"Constructors","text":""},{"location":"Route/Param/Error/#ActionController::Route::Param::Error.new(message,parameter,restriction)","title":"<code>.new(message, parameter : Nil | String = nil, restriction : Nil | String = nil)</code>","text":"View source"},{"location":"Route/Param/Error/#ActionController::Route::Param::Error-methods","title":"Methods","text":""},{"location":"Route/Param/Error/#ActionController::Route::Param::Error#parameter","title":"<code>#parameter : String | ::Nil</code>","text":"View source"},{"location":"Route/Param/Error/#ActionController::Route::Param::Error#restriction","title":"<code>#restriction : String | ::Nil</code>","text":"View source"},{"location":"Route/Param/MissingError/","title":"Index","text":""},{"location":"Route/Param/MissingError/#ActionController::Route::Param::MissingError","title":"class <code>ActionController::Route::Param::MissingError</code> inherits <code>ActionController::Route::Param::Error</code>","text":""},{"location":"Route/Param/ValueError/","title":"Index","text":""},{"location":"Route/Param/ValueError/#ActionController::Route::Param::ValueError","title":"class <code>ActionController::Route::Param::ValueError</code> inherits <code>ActionController::Route::Param::Error</code>","text":""},{"location":"Route/UnsupportedMediaType/","title":"Index","text":""},{"location":"Route/UnsupportedMediaType/#ActionController::Route::UnsupportedMediaType","title":"class <code>ActionController::Route::UnsupportedMediaType</code> inherits <code>ActionController::Route::Error</code>","text":"<p>we don't support the posted media type</p>"},{"location":"Route/WebSocket/","title":"Index","text":""},{"location":"Route/WebSocket/#ActionController::Route::WebSocket","title":"annotation <code>ActionController::Route::WebSocket</code>","text":""},{"location":"Router/","title":"Index","text":""},{"location":"Router/#ActionController::Router","title":"module <code>ActionController::Router</code>","text":""},{"location":"Router/#ActionController::Router-constants","title":"Constants","text":""},{"location":"Router/#ActionController::Router::HTTP_METHODS","title":"<code>HTTP_METHODS = [\"get\", \"post\", \"put\", \"patch\", \"delete\", \"options\", \"head\"] of ::String</code>","text":""},{"location":"Router/#ActionController::Router-methods","title":"Methods","text":""},{"location":"Router/#ActionController::Router#delete(path,&)","title":"<code>#delete(path : String, &amp;block : Action)</code>","text":"View source"},{"location":"Router/#ActionController::Router#get(path,&)","title":"<code>#get(path : String, &amp;block : Action)</code>","text":"View source"},{"location":"Router/#ActionController::Router#head(path,&)","title":"<code>#head(path : String, &amp;block : Action)</code>","text":"View source"},{"location":"Router/#ActionController::Router#options(path,&)","title":"<code>#options(path : String, &amp;block : Action)</code>","text":"View source"},{"location":"Router/#ActionController::Router#patch(path,&)","title":"<code>#patch(path : String, &amp;block : Action)</code>","text":"View source"},{"location":"Router/#ActionController::Router#post(path,&)","title":"<code>#post(path : String, &amp;block : Action)</code>","text":"View source"},{"location":"Router/#ActionController::Router#put(path,&)","title":"<code>#put(path : String, &amp;block : Action)</code>","text":"View source"},{"location":"Router/#ActionController::Router#route_handler","title":"<code>#route_handler : RouteHandler</code>","text":"View source"},{"location":"Router/Action/","title":"Index","text":""},{"location":"Router/Action/#ActionController::Router::Action","title":"alias <code>ActionController::Router::Action</code>","text":"Alias definition <code>HTTP::Server::Context, Bool -&gt; HTTP::Server::Context</code>"},{"location":"Router/RouteHandler/","title":"Index","text":""},{"location":"Router/RouteHandler/#ActionController::Router::RouteHandler","title":"class <code>ActionController::Router::RouteHandler</code> inherits <code>Reference</code>","text":"Included modules <code>HTTP::Handler</code>"},{"location":"Router/RouteHandler/#ActionController::Router::RouteHandler-constructors","title":"Constructors","text":""},{"location":"Router/RouteHandler/#ActionController::Router::RouteHandler.new","title":"<code>.new</code>","text":"View source"},{"location":"Router/RouteHandler/#ActionController::Router::RouteHandler-methods","title":"Methods","text":""},{"location":"Router/RouteHandler/#ActionController::Router::RouteHandler#add_route(method,path,action)","title":"<code>#add_route(method : String, path : String, action : Tuple(Action, Bool))</code>","text":"<p>Adds a route handler to the system Determines if routes are static or require decomposition and stores them appropriately</p> View source"},{"location":"Router/RouteHandler/#ActionController::Router::RouteHandler#call(context)","title":"<code>#call(context : HTTP::Server::Context)</code>","text":"<p>Routes requests to the appropriate handler Called from HTTP::Server in server.cr</p> View source"},{"location":"Router/RouteHandler/#ActionController::Router::RouteHandler#process_request(search_path,context,controller_dispatch,head_request)","title":"<code>#process_request(search_path, context, controller_dispatch, head_request)</code>","text":"<p>We split out the processing of the request for simplified injection of telemetry</p> View source"},{"location":"Router/RouteHandler/#ActionController::Router::RouteHandler#search_route(method,req_path,search_path,context)","title":"<code>#search_route(method, req_path, search_path, context : HTTP::Server::Context) : Tuple(Action, Bool) | Nil</code>","text":"<p>Builds the internal representation of a route then searches static routes before checking the matcher</p> View source"},{"location":"Session/","title":"Session","text":""},{"location":"Session/#ActionController::Session","title":"class <code>ActionController::Session</code> inherits <code>Reference</code>","text":"Included modules <code>Habitat::SettingsHelpers</code> <code>Habitat::TempConfig</code>"},{"location":"Session/#ActionController::Session-constants","title":"Constants","text":""},{"location":"Session/#ActionController::Session::HABITAT_SETTINGS","title":"<code>HABITAT_SETTINGS = [{decl: key : String, example: nil, validation: nil}, {decl: secret : String, example: nil, validation: nil}, {decl: max_age : Int32 = NEVER, example: nil, validation: nil}, {decl: secure : Bool = false, example: nil, validation: nil}, {decl: encrypted : Bool = true, example: nil, validation: nil}, {decl: path : String = \"/\", example: nil, validation: nil}, {decl: domain : String | ::Nil = nil, example: nil, validation: nil}] of Nil</code>","text":""},{"location":"Session/#ActionController::Session::Log","title":"<code>Log = ::Log.for(\"action-controller.session\")</code>","text":""},{"location":"Session/#ActionController::Session::MAX_COOKIE_SIZE","title":"<code>MAX_COOKIE_SIZE = 4096</code>","text":"<p>Cookies can typically store 4096 bytes.</p>"},{"location":"Session/#ActionController::Session::NEVER","title":"<code>NEVER = 622080000</code>","text":""},{"location":"Session/#ActionController::Session-constructors","title":"Constructors","text":""},{"location":"Session/#ActionController::Session.new","title":"<code>.new</code>","text":"View source"},{"location":"Session/#ActionController::Session-class-methods","title":"Class methods","text":""},{"location":"Session/#ActionController::Session.configure(&)","title":"<code>.configure</code>","text":"View source"},{"location":"Session/#ActionController::Session.from_cookies(cookies)","title":"<code>.from_cookies(cookies)</code>","text":"View source"},{"location":"Session/#ActionController::Session.settings","title":"<code>.settings</code>","text":"View source"},{"location":"Session/#ActionController::Session-methods","title":"Methods","text":""},{"location":"Session/#ActionController::Session#[]=(key,value)","title":"<code>#[]=(key, value)</code>","text":"View source"},{"location":"Session/#ActionController::Session#clear","title":"<code>#clear</code>","text":"View source"},{"location":"Session/#ActionController::Session#delete(key)","title":"<code>#delete(key)</code>","text":"View source"},{"location":"Session/#ActionController::Session#delete(key,&)","title":"<code>#delete</code>","text":"View source"},{"location":"Session/#ActionController::Session#delete_if(&)","title":"<code>#delete_if</code>","text":"View source"},{"location":"Session/#ActionController::Session#domain","title":"<code>#domain : String | ::Nil</code>","text":"View source"},{"location":"Session/#ActionController::Session#domain=(domain)","title":"<code>#domain=(domain : String | Nil)</code>","text":"View source"},{"location":"Session/#ActionController::Session#encode(cookies)","title":"<code>#encode(cookies)</code>","text":"View source"},{"location":"Session/#ActionController::Session#modified","title":"<code>#modified : Bool</code>","text":"<p>Returns whether any key-value pair is modified.</p> View source"},{"location":"Session/#ActionController::Session#parse(cookies)","title":"<code>#parse(cookies)</code>","text":"View source"},{"location":"Session/#ActionController::Session#reject(&)","title":"<code>#reject</code>","text":"View source"},{"location":"Session/#ActionController::Session#settings","title":"<code>#settings</code>","text":"View source"},{"location":"Session/#ActionController::Session#touch","title":"<code>#touch</code>","text":"View source"},{"location":"Session/#ActionController::Session-macros","title":"Macros","text":""},{"location":"Session/#ActionController::Session:method_missing(call)","title":"<code>method_missing(call)</code>","text":"View source"},{"location":"Session/HabitatSettings/","title":"Index","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings","title":"class <code>ActionController::Session::HabitatSettings</code> inherits <code>Reference</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings-class-methods","title":"Class methods","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.domain","title":"<code>.domain : String | ::Nil</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.domain=(value)","title":"<code>.domain=(value : String | Nil)</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.domain?","title":"<code>.domain?</code>","text":"<p>Used for checking missing settings on non-nilable types It's advised to use domain in your apps to ensure the propper type is checked.</p>"},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.encrypted","title":"<code>.encrypted : Bool</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.encrypted=(value)","title":"<code>.encrypted=(value : Bool)</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.encrypted?","title":"<code>.encrypted?</code>","text":"<p>Used for checking missing settings on non-nilable types It's advised to use encrypted in your apps to ensure the propper type is checked.</p>"},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.key","title":"<code>.key : String</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.key=(value)","title":"<code>.key=(value : String)</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.key?","title":"<code>.key?</code>","text":"<p>Used for checking missing settings on non-nilable types It's advised to use key in your apps to ensure the propper type is checked.</p>"},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.max_age","title":"<code>.max_age : Int32</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.max_age=(value)","title":"<code>.max_age=(value : Int32)</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.max_age?","title":"<code>.max_age?</code>","text":"<p>Used for checking missing settings on non-nilable types It's advised to use max_age in your apps to ensure the propper type is checked.</p>"},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.path","title":"<code>.path : String</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.path=(value)","title":"<code>.path=(value : String)</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.path?","title":"<code>.path?</code>","text":"<p>Used for checking missing settings on non-nilable types It's advised to use path in your apps to ensure the propper type is checked.</p>"},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.secret","title":"<code>.secret : String</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.secret=(value)","title":"<code>.secret=(value : String)</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.secret?","title":"<code>.secret?</code>","text":"<p>Used for checking missing settings on non-nilable types It's advised to use secret in your apps to ensure the propper type is checked.</p>"},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.secure","title":"<code>.secure : Bool</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.secure=(value)","title":"<code>.secure=(value : Bool)</code>","text":""},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.secure?","title":"<code>.secure?</code>","text":"<p>Used for checking missing settings on non-nilable types It's advised to use secure in your apps to ensure the propper type is checked.</p>"},{"location":"Session/HabitatSettings/#ActionController::Session::HabitatSettings.to_h","title":"<code>.to_h</code>","text":"<p>Generates a hash using the provided values</p>"},{"location":"Support/","title":"Support","text":""},{"location":"Support/#ActionController::Support","title":"module <code>ActionController::Support</code>","text":""},{"location":"Support/#ActionController::Support-constants","title":"Constants","text":""},{"location":"Support/#ActionController::Support::TYPE_SEPARATOR_REGEX","title":"<code>TYPE_SEPARATOR_REGEX = /;\\s*/</code>","text":""},{"location":"Support/#ActionController::Support-class-methods","title":"Class methods","text":""},{"location":"Support/#ActionController::Support.build_route(route,hash_parts,**)","title":"<code>.build_route(route, hash_parts : Hash(String | Symbol, Nil | Bool | Int32 | Int64 | Float32 | Float64 | String | Symbol) | Nil = nil, **tuple_parts)</code>","text":"<p>Used in base.cr to build routes for the redirect_to helpers</p> View source"},{"location":"Support/#ActionController::Support.content_type(headers)","title":"<code>.content_type(headers)</code>","text":"<p>Extracts the mime type from the content type header</p> View source"},{"location":"Support/#ActionController::Support.redirect_to_https(context)","title":"<code>.redirect_to_https(context)</code>","text":"View source"},{"location":"Support/#ActionController::Support.request_protocol(request)","title":"<code>.request_protocol(request)</code>","text":"View source"},{"location":"Support/#ActionController::Support.websocket_upgrade_request?(request)","title":"<code>.websocket_upgrade_request?(request)</code>","text":"View source"},{"location":"configuration/","title":"New Project","text":"<ol> <li>Install Crystal Lang</li> <li>Clone the project template (and optionally mirror it)</li> <li><code>git clone https://github.com/spider-gazelle/spider-gazelle.git</code></li> <li><code>cd spider-gazelle</code></li> <li><code>git push --mirror https://github.com/exampleuser/new-project.git</code></li> <li><code>cd .. &amp;&amp; git clone https://github.com/exampleuser/new-project.git</code></li> </ol>"},{"location":"configuration/#configuring-your-project","title":"Configuring your project","text":"<p>Common configuration options, such as your projects name and cookie key names, can be found in ./src/config.cr</p>"},{"location":"configuration/#running-your-project","title":"Running your project","text":"<ul> <li><code>crystal ./src/app.cr</code></li> </ul> <p>to have the project live reload as you develop</p> <ol> <li>Install NodeJS</li> <li>Install nodemon <code>npm i -g nodemon</code></li> </ol> <p>then run the following command to have your project live reload</p> <ul> <li><code>nodemon --exec crystal ./src/app.cr</code></li> </ul>"},{"location":"configuration/#testing-your-project","title":"Testing your project","text":"<p>Spider-Gazelle leverages crystal langs built in testing libraries</p> <ul> <li>to run tests: <code>crystal spec</code></li> <li>or as you edit code: <code>nodemon --exec crystal spec</code></li> </ul>"},{"location":"configuration/#compiling-your-project","title":"Compiling your project","text":"<ul> <li><code>crystal build ./src/app.cr</code></li> </ul> <p>or</p> <ul> <li><code>shards build --production</code></li> <li>grabs the latest dependencies before the build</li> <li>deploys the binary as per the compile target in your <code>shard.yml</code></li> </ul> <p>once compiled there are a number of command line options</p> <ul> <li>execute <code>./app --help</code> to see the options</li> <li>viewing routes <code>./app --routes</code></li> <li>run on a different port or host <code>./app -b 0.0.0.0 -p 80</code></li> </ul>"},{"location":"configuration/command_line/","title":"Command line options","text":""},{"location":"configuration/command_line/#web-server-arguments","title":"Web server arguments","text":""},{"location":"configuration/command_line/#bind-host","title":"Bind host","text":"<p><code>-b HOST</code> or <code>--bind=HOST</code> allow to change host binded. Default : \"127.0.0.1\" </p>"},{"location":"configuration/command_line/#bind-port","title":"Bind port","text":"<p><code>-p PORT</code> or <code>--port=PORT</code> allow to change port binded. Default : 3000</p>"},{"location":"configuration/command_line/#workers","title":"Workers","text":"<p><code>-w COUNT</code> or <code>--workers=COUNT</code> allow to change the number of processes to handle requests. Default : 1</p>"},{"location":"configuration/command_line/#usefull-arguments","title":"Usefull arguments","text":""},{"location":"configuration/command_line/#list-the-application-routes","title":"List the application routes","text":"<p><code>-r</code> or <code>--routes</code> display the list of application routes with <code>Controller#Action</code>, <code>Verb</code> and <code>URI Pattern</code></p> <p>Example : </p> <pre><code>Controller#Action                   Verb   URI Pattern\nAuthEndPoint#signin                 post   /api/users/login\nAuthEndPoint#signup                 post   /api/users/\nUserEndpoint#me                     get    /api/user/\nUserEndpoint#update                 put    /api/user/\nProfileEndpoint#show                get    /api/profiles/:username\nProfileEndpoint#follow              post   /api/profiles/:username/follow\nProfileEndpoint#unfollow            delete /api/profiles/:username/follow\n</code></pre>"},{"location":"configuration/command_line/#generate-openapi-documentation","title":"Generate OpenAPI Documentation","text":"<p><code>-d</code> or <code>--docs</code> return OpenAPI documentation in the STDOUT.</p> <p>if you want the documentation in a file, you can add <code>-f FILE</code> ou <code>--file=FILE</code> to this command.</p> <p>WARNING : this command works with <code>crystal</code> binary available.</p>"},{"location":"configuration/command_line/#curl","title":"Curl","text":"<p><code>-c URL</code> or <code>--curl=URL</code> perform a basic health check by requesting the URL.</p> <p>this command is useful when you want to define a healthcheck command with docker, without having to install curl. For example, in an <code>FROM SCRATCH</code> image.</p>"},{"location":"configuration/logging/","title":"Logging and instrumetion","text":"<p>TODO::</p>"},{"location":"deployment/","title":"Deploying your project","text":"<p>We use docker to package and distribute our applications to production. As such, this guide is opinionated and is by no means the only way to deploy your app.</p> <p>A quick thank you to Manus Tech for publishing their work in this area.</p>"},{"location":"deployment/#prerequisites","title":"Prerequisites","text":"<p>Some useful online tools:</p> <ul> <li>a docker hub account (free)</li> <li>optionally a codefresh account for fast auto-builds</li> <li>install docker for your operating system</li> </ul>"},{"location":"deployment/#creating-a-docker-image","title":"Creating a Docker image","text":"<p>This will create a docker image that is roughly 45 MiB in size, when using the default Dockerfile.</p> <ol> <li>in a terminal, <code>cd</code> into the application folder</li> <li>run: <code>docker build -t dhub-user/spider-gazelle:latest .</code> (latest is the default tag)</li> <li>this will create a docker image and tag it</li> <li>you can also run <code>docker build .</code> and then <code>docker images</code> if you don't have docker hub</li> </ol> <p>Then you can run the image locally if you like</p> <ul> <li><code>docker run -it --rm dhub-user/spider-gazelle</code></li> </ul> <p>To save this image for use in a deployment requires docker hub</p> <ol> <li><code>docker login</code></li> <li><code>docker push dhub-user/spider-gazelle</code></li> </ol>"},{"location":"deployment/#deployment","title":"Deployment","text":"<ol> <li>ssh into your server</li> <li>log into docker hub if using a private repo: <code>docker login</code></li> <li><code>docker pull dhub-user/spider-gazelle</code></li> <li><code>docker run -d -p 8080:8080 --restart=always --name=spider-gazelle dhub-user/spider-gazelle</code></li> <li><code>-d</code> means daemonize</li> <li><code>-p 8080:8080</code> maps the container port 8080 to the OS port 8080</li> <li><code>--restart=always</code> means the service should always be running (after computer restarts or app crashes)</li> <li><code>--name=spider-gazelle</code> the name of the docker service</li> <li>you can now start and stop the service as you desire</li> <li><code>docker start spider-gazelle</code> (if you named the service spider-gazelle)</li> <li><code>docker stop spider-gazelle</code></li> <li><code>docker restart spider-gazelle</code></li> <li><code>docker rm spider-gazelle</code> (removes the service)</li> </ol>"},{"location":"deployment/#automated-builds","title":"Automated builds","text":"<p>If you would like your docker image to be ready to deploy every time you commit a change</p>"},{"location":"deployment/#github-actions","title":"Github actions","text":"<p>We use github actions and the github repository for automated builds.</p>"},{"location":"deployment/#codefresh","title":"Codefresh","text":"<p>One option we used in the past was codefresh as it ran faster when compared to docker hub.</p> <ol> <li>Login using your browser</li> <li>Click \"add repository\"</li> <li>Select your git repository (or add by URL)</li> <li>Select the branch to use for builds</li> </ol>"},{"location":"deployment/#docker-hub","title":"Docker Hub","text":"<ol> <li>Login on your browser</li> <li>Click \"create automated build\"</li> <li>select your git repository</li> <li>select your Dockerfile</li> </ol>"},{"location":"getting_started/","title":"Getting Started","text":"<p>Spider-Gazelle does not have any other dependencies outside of Crystal and Shards. It is designed in such a way to be non-intrusive, and not require a strict organizational convention in regards to how a project is setup; this allows it to use a minimal amount of setup boilerplate while not preventing it for more complex projects.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>Add the dependency to your <code>shard.yml</code>:</p> <pre><code>dependencies:\n  action-controller:\n    github: spider-gazelle/action-controller\n    version: ~&gt; 5.6\n</code></pre> <p>Run <code>shards install</code>.</p>"},{"location":"getting_started/#usage","title":"Usage","text":"<p>Spider-Gazelle has a goal of being easy to start using for simple use cases, while still allowing flexibility/customizability for larger more complex use cases.</p>"},{"location":"getting_started/#routing","title":"Routing","text":"<p>Spider-Gazelle is a MVC based framework, as such, the logic to handle a given route is defined in an ActionController::Base class.</p> <pre><code>require \"action-controller\"\n\n# Define a controller\nclass ExampleController &lt; AC::Base\n  # defaults to \"/example_controller\" overwrite with this directive\n  base \"/\"\n\n  # Define an action to handle the related route\n  @[AC::Route::GET(\"/\")]\n  def index\n    \"Hello World\"\n  end\n\n  # The macro DSL can also be used\n  get \"/dsl\" do\n    render text: \"Hello World\"\n  end\nend\n\n# Run the server\nrequire \"action-controller/server\"\nAC::Server.new.run\n\n# GET / # =&gt; Hello World\n</code></pre> <p>Routing is handled via LuckyRouter for insanely fast route matching. See the routing documentation for more information.</p> <p>Controllers are simply classes and routes are simply methods. Controllers and actions can be documented/tested as you would any Crystal class/method.</p>"},{"location":"getting_started/#route-and-query-parameters","title":"Route and Query Parameters","text":"<p>Arguments are converted to their expected types if possible, otherwise an error response is automatically returned. The values are provided directly as method arguments, thus preventing the need for <code>params[\"name\"]</code> and any boilerplate related to it. Just like normal method arguments, default values can be defined. The method's return type adds some type safety to ensure the expected value is being returned, however it is optional.</p> <pre><code>require \"action-controller\"\n\n# base route is inferred off the class\nclass Add &lt; AC::Base\n  @[AC::Route::GET(\"/:value1/:value2\")]\n  def add(value1 : Int32, value2 : Int32, negative : Bool = false)\n    sum = value1 + value2\n    negative ? -sum : sum\n  end\nend\n\nrequire \"action-controller/server\"\nAC::Server.new.run\n\n# GET /add/2/3               # =&gt; 5\n# GET /add/5/5?negative=true # =&gt; -10\n# GET /add/foo/12            # =&gt; AC::Route::Param::ValueError&lt;@message=\"invalid parameter value\" @parameter=\"value1\" @restriction=\"Int32\"&gt;\n</code></pre> <p>Route and query params are automatically inferred based on the route annotation and map directly to the method's arguments. See the related annotation docs for more information.</p> <pre><code>require \"action-controller\"\n\nclass ExampleController &lt; AC::Base\n  base \"/\"\n\n  @[AC::Route::GET(\"/\", config: {page: {base: 16}})]\n  def index(page : Int32)\n    page\n  end\nend\n\nrequire \"action-controller/server\"\nAC::Server.new.run\n\n# GET /          # =&gt; AC::Route::Param::MissingError&lt;@message=\"missing required parameter\" @parameter=\"value1\" @restriction=\"Int32\"&gt;\n# GET /?page=10  # =&gt; 16 (as we configured the page param to accept hex values)\n# GET /?page=bar # =&gt; AC::Route::Param::ValueError&lt;@message=\"invalid parameter value\" @parameter=\"value1\" @restriction=\"Int32\"&gt;\n</code></pre> <p>Params can be customised at the argument level too using the <code>@[AC::Param::Converter]</code> annotation</p> <pre><code>require \"action-controller\"\n\nclass ExampleController &lt; AC::Base\n  base \"/\"\n\n  @[AC::Route::GET(\"/\")]\n  def index(\n    @[AC::Param::Converter(class: OptionalConvertorKlass, config: {base: 16}, name: \"customParamName\")]\n    page : Int32\n  )\n    page\n  end\nend\n\nrequire \"action-controller/server\"\nAC::Server.new.run\n</code></pre>"},{"location":"getting_started/#body-parsing","title":"Body parsing","text":"<p>The request body can be accessed via the helper method <code>request</code>, <code>request.body</code> However it is recommended that the body be deserializing directly into an object</p> <pre><code>require \"json\"\nrequire \"yaml\"\nrequire \"action-controller\"\n\nstruct UserName\n  include JSON::Serializable\n  include YAML::Serializable\n\n  getter id : Int32\n  getter name : String\nend\n\nclass ExampleController &lt; AC::Base\n  base \"/\"\n\n  @[AC::Route::POST(\"/data\", body: :user)]\n  def data(user : UserName) : String\n    user.name\n  end\nend\n\nrequire \"action-controller/server\"\nAC::Server.new.run\n\n# POST /data body: {\"id\":1,\"name\":\"Jim\"} # =&gt; Jim\n# curl -d '{\"id\":1,\"name\":\"Jim\"}' --header \"Content-Type: application/json\" http://localhost:3000/data =&gt; Jim\n</code></pre> <p>Spider-Gazelle configures a JSON parser by default, however you can add custom parsers, configure a new default and also remove the JSON parser</p> <pre><code>  abstract class Application &lt; AC::Base\n    add_parser(\"application/yaml\") { |klass, body_io| klass.from_yaml(body_io.gets_to_end) }\n  end\n</code></pre> <p>You then use the Content-Type header to specify the format of your request body</p>"},{"location":"getting_started/#responding","title":"Responding","text":"<p>Responses are automatically rendered via a responder and selected using the requests Accept header You can also use the <code>response</code> object to fully customize the response; such as adding some one-off headers.</p> <pre><code>require \"action-controller\"\nrequire \"yaml\"\n\nabstract class Application &lt; AC::Base\n  # the responder block is run in the context of the current controller instance\n  # if you need access to the `request` or `response` or any other helpers to render the response\n  add_responder(\"application/yaml\") { |io, result, _klass_symbol, _method_symbol| result.to_yaml(io) }\n  default_responder \"application/yaml\"\nend\n\n# Define a controller\nclass ExampleController &lt; Application\n  # defaults to \"/example_controller\" overwrite with this directive\n  base \"/\"\n\n  # Define an action to handle the related route\n  @[AC::Route::GET(\"/\")]\n  def index\n    \"Hello World\"\n  end\nend\n\nrequire \"action-controller/server\"\nAC::Server.new.run\n\n# GET / # =&gt; \"--- Hello World\"\n</code></pre>"},{"location":"getting_started/#error-handling","title":"Error Handling","text":"<p>Unhandled exceptions are represented as a <code>500 Internal Server Error</code> Error handlers can be defined gloabally, in your abstract base class, or specificially to a controller.</p> <pre><code>require \"action-controller\"\n\nclass Divide &lt; AC::Base\n  @[AC::Route::GET(\"/:num1/:num2\")]\n  def divide(num1 : Int32, num2 : Int32) : Int32\n    num1 // num2\n  end\n\n  @[AC::Route::Exception(DivisionByZeroError, status_code: HTTP::Status::BAD_REQUEST)]\n  def division_by_zero(error)\n    {\n      error: error.message\n    }\n  end\nend\n\nrequire \"action-controller/server\"\nAC::Server.new.run\n\n# GET /divide/10/0  # =&gt; {\"error\": \"Division by 0\"}\n# GET /divide_rescued/10/10 # =&gt; 1\n</code></pre>"},{"location":"getting_started/#cors-management","title":"CORS management","text":"<p>CORS policy can be defined in a <code>before_action</code></p> <pre><code>require \"action-controller\"\n\nabstract class Application &lt; AC::Base\n  before_action :enable_cors\n\n  def enable_cors\n    response.headers[\"Access-Control-Allow-Origin\"] = \"*\"\n    response.headers[\"Access-Control-Allow-Headers\"] = \"Content-Type\"\n    response.headers[\"Content-Type\"] = \"application/json\"\n    response.headers[\"Access-Control-Allow-Methods\"] = \"GET,HEAD,POST,DELETE,OPTIONS,PUT,PATCH\"\n  end\nend\n\n# Define a controller\nclass ExampleController &lt; Application\n  base \"/\"\n\n  @[AC::Route::OPTIONS(\"/\")]\n  def cors\n  end\n\n  @[AC::Route::GET(\"/\")]\n  def index\n    render json: {\"message\" =&gt; \"Hello World\"}\n  end\nend\n\n# Run the server\nrequire \"action-controller/server\"\nAC::Server.new.run\n</code></pre>"},{"location":"getting_started/#logging","title":"Logging","text":"<p>Logging is handled via Crystal's Log module. Spider-Gazelle logs when a request matches a controller action, as well as any exception. This of course can be augmented with additional application specific messages.</p> <p>Here we're adding context to the logger that is valid for the lifetime of the request.</p> <pre><code>require \"action-controller\"\nrequire \"uuid\"\n\nabstract class Application &lt; AC::Base\n  # NOTE:: you can chain this log from a base log instance\n  Log = ::Log.for(\"application.controller\")\n\n  @[AC::Route::Filter(:before_action)]\n  def set_request_id\n    request_id = UUID.random.to_s\n    Log.context.set(\n      client_ip: client_ip,\n      request_id: request_id\n    )\n    response.headers[\"X-Request-ID\"] = request_id\n  end\nend\n</code></pre> <p>A new log context is provided for every request. All logs made during the lifetime of the request will be tagged with anything added to it.</p>"},{"location":"getting_started/#websockets","title":"WebSockets","text":"<p>websockets can be defined just like any other route, this is a very basic chat room app (probably should have some locks etc)</p> <pre><code>require \"action-controller\"\n\nclass ExampleController &lt; AC::Base\n  base \"/\"\n\n  SOCKETS = Hash(String, Array(HTTP::WebSocket)) { |hash, key| hash[key] = [] of HTTP::WebSocket }\n\n  @[AC::Route::WebSocket(\"/websocket/:room\")]\n  def websocket(socket, room : String)\n    puts \"Socket opened\"\n    sockets = SOCKETS[room]\n    sockets &lt;&lt; socket\n\n    socket.on_message do |message|\n      sockets.each &amp;.send(\"#{message} + #{@me}\")\n    end\n\n    socket.on_close do\n      puts \"Socket closed\"\n      sockets.size == 1 ? SOCKETS.delete(room) : sockets.delete(socket)\n    end\n  end\nend\n</code></pre>"},{"location":"getting_started/#filtering","title":"Filtering","text":"<p>Filters are methods that are run \"around\", \"before\" or \"after\" a controller action.</p> <p>Filters are inherited, so if you set a filter on a base Controller, it will be run on every controller in your application.</p> <ul> <li><code>around_action</code> wraps all the before filters and the request, useful for setup database transactions</li> <li><code>before_action</code> runs before the action method, useful for checking authentication, authorisation and loading resources required by the action (keep your code DRY)</li> <li><code>after_action</code> run after the response data has been sent to the client, has access to the response</li> </ul>"},{"location":"getting_started/#before-filters","title":"Before filters","text":"<p>After filters can be used in the same way as before filters</p> <pre><code>abstract class Application &lt; AC::Base\n  base \"/\"\n\n  getter! user : User\n  getter! comment : Comment\n\n  @[AC::Route::Filter(:before_action, except: :login)]\n  def get_current_user\n    user_id = session[\"user_id\"]?\n    render :unauthorized unless user_id\n    @user = User.find!(user_id)\n  end\n\n  @[AC::Route::Filter(:before_action, only: [:update_comment, :delete_comment])]\n  def check_access(id : Int64?)\n    if id\n      @comment = Comment.find!(id)\n      render :forbidden unless comment.user_id == user.id\n    end\n  end\nend\n</code></pre>"},{"location":"getting_started/#around-filters","title":"Around filters","text":"<p>Around filters must yield to the action.</p> <pre><code>abstract class Application &lt; AC::Base\n  base \"/\"\n\n  @[AC::Route::Filter(:around_action, only: [:create, :update, :destroy])]\n  def wrap_in_transaction\n    Database.transaction { yield }\n  end\nend\n</code></pre>"},{"location":"getting_started/#skipping-filters","title":"Skipping filters","text":"<p>If you have a filter on a base class like <code>get_current_user</code> above, you might want to skip this in another controller.</p> <pre><code>abstract class Application &lt; AC::Base\n  getter! user : User\n\n  @[AC::Route::Filter(:before_action, except: :login)]\n  def get_current_user\n    user_id = session[\"user_id\"]?\n    render :unauthorized unless user_id\n    @user = User.find!(user_id)\n  end\nend\n\nclass PublicController &lt; Application\n  base \"/public\"\n\n  skip_action :get_current_user, only: :index\n\n  @[AC::Route::GET(\"/\")]\n  def index\n    \"Hello World\"\n  end\nend\n</code></pre>"},{"location":"getting_started/#force-https-protocol","title":"Force HTTPS protocol","text":"<p>Sometime you might want to force a particular controller to only be accessible via an HTTPS protocol for security reasons. You can use the <code>force_ssl</code> method in your controller to enforce that:</p> <pre><code>class DinnerController &lt; Application\n  force_ssl\nend\n</code></pre>"},{"location":"getting_started/#the-request-and-response-objects","title":"The request and response objects","text":"<p>In every controller there are two accessor methods pointing to the request and the response objects associated with the request cycle that is currently in execution. The <code>request</code> method contains an instance of <code>HTTP::Request</code> and the <code>response</code> method returns an instance of <code>HTTP::Server::Response</code> representing what is going to be sent back to the client.</p>"},{"location":"getting_started/#setting-custom-headers","title":"Setting custom headers","text":"<p>If you want to set custom headers for a response then <code>response.headers</code> is the place to do it. The headers attribute is a hash which maps header names to their values, and Spider-Gazelle will set some of them automatically. If you want to add or change a header, just assign it to <code>response.headers</code> this way:</p> <pre><code>response.headers[\"Content-Type\"] = \"application/pdf\"\n</code></pre> <p>in the above case it would make more sense to use the <code>response.content_type</code> setter directly.</p>"},{"location":"getting_started/routing/","title":"Routing","text":"<p>Controllers describe and handle routes. There are three methods for defining routes</p> <ul> <li>Strong Paramaters (recommended)</li> <li>Macro DSL (fine control)</li> </ul>"},{"location":"getting_started/routing/#strong-paramaters","title":"Strong Paramaters","text":"<p>This is the recommended method for routing. It conflates routing with the type casting of paramaters to help ensure program correctness by leveraging the type system. The paramater type casting also applies to filters and exception handlers, where the use of the current routes paramaters is desired.</p>"},{"location":"getting_started/routing/#verbs","title":"Verbs","text":"<p>The following verbs are provided</p> <pre><code>class Comments &lt; Application\n  base \"/comments\"\n\n  @[AC::Route::GET(\"/\")]\n  def index; end\n\n  @[AC::Route::POST(\"/\")]\n  def create; end\n\n  @[AC::Route::PUT(\"/:id\")]\n  def replace(id : Int64 | String); end\n\n  @[AC::Route::PATCH(\"/:id\")]\n  def update(id : Int64); end\n\n  @[AC::Route::DELETE(\"/:id\")]\n  def destroy(id : String); end\n\n  # optional id param\n  @[AC::Route::OPTIONS(\"/?:id\")]\n  def options(id : Int64 | String | Nil); end\nend\n</code></pre>"},{"location":"getting_started/routing/#defining-routes","title":"Defining routes","text":"<p>Route paramaters, as opposed to query paramaters, are defined as part of the URL path.</p> <ul> <li>you may mark parts of the path with a <code>:</code> to have a param with a matching name in the action</li> <li>i.e. <code>/users/:some_user_id</code> will result in a param named <code>some_user_id</code></li> <li><code>/projects/:project_id/tasks/:task_id</code> would have a <code>project_id</code> and <code>task_id</code> param generated</li> <li>route paramaters take precedence over any query paramaters with matching names</li> <li>optional paramaters are prefixed with a <code>?</code></li> <li><code>/users/?:some_user_id/groups</code> allows the path segment <code>some_user_id</code> to be optional</li> <li>glob path allows multiple segments (i.e. captures a <code>/</code> value as part of the params)</li> <li><code>/path/*:path_to_file</code> would match <code>/path/my/file/location.cr</code>, setting <code>param[\"path_to_file\"] # =&gt; \"my/file/location.cr\"</code></li> </ul> <p>multiple routes can also be applied to a single function</p> <pre><code>@[AC::Route::GET(\"/users/:id/groups\")]\n@[AC::Route::GET(\"/users/groups\")]\ndef groups(user_id : Int64?); end\n</code></pre> <p>however in the example above you could achieve the same thing with a single route <code>@[AC::Route::GET(\"/users/?:id/groups\")]</code></p>"},{"location":"getting_started/routing/#extracting-paramaters","title":"Extracting paramaters","text":"<p>Paramter extraction occurs accross the route params, query params and form data</p> <p>Take the following example:</p> <pre><code># This could be an DB ORM etc\nclass MyModel\n  include JSON::Serializable\n  include YAML::Serializable\n\n  getter x : Float64\n  getter y : Float64\nend\n\n@[AC::Route::PATCH(\"/:id\", body: :model)]\ndef replace(id : Int64, model : MyModel, merge_arrays : Bool = false); end\n</code></pre> <ul> <li>the <code>id</code> is extracted from the route (the function paramater names are matched)</li> <li><code>merge_arrays</code> is extracted from the query params and set to false if not provided</li> <li>the <code>model</code> being patched is extracted from the body and serialised according to the <code>Content-Type</code> header and matching parser</li> </ul>"},{"location":"getting_started/routing/#customising-parsing","title":"Customising parsing","text":"<p>Parsers can be customised to parse types in various different ways</p> <pre><code>@[AC::Route::GET(\"/:id\", config: {\n  time: {format: \"%F %:z\"},\n  degrees: {strict: false},\n  id: {base: 16, underscore: true, strict: false}\n})]\ndef replace(id : Int64, degrees : Float64, time : Time); end\n</code></pre> <p>There are built in parsers for the following types</p> <ul> <li>Number types</li> <li>String</li> <li>Char</li> <li>Bool</li> <li>Time</li> <li>Enum</li> <li>UUID</li> </ul> <p>You can find the custom options here</p>"},{"location":"getting_started/routing/#custom-paramater-parser","title":"Custom paramater parser","text":"<p>You can implement your own type parsers, they can be any class that implements <code>def convert(raw : String)</code>. Initiailizer arguments are the possible customisations.</p> <pre><code>record Commit, branch : String, commit : String\n\nstruct ::ActionController::Route::Param::ConvertCommit\n  # i.e. `\"master#742887\"`\n  def convert(raw : String)\n    branch, commit = raw.split('#')\n    Commit.new(branch, commit)\n  end\nend\n\n@[AC::Route::GET(\"/:commit\")]\ndef replace(commit : Commit); end\n</code></pre> <p>any converter scoped to <code>ActionController::Route::Param</code> and class name starting with <code>Convert</code> will automatically be converted. If you would like to be more explicit:</p> <pre><code>record Commit, branch : String, commit : String\n\nstruct ConvertCommit\n  # i.e. `\"master#742887\"`\n  def convert(raw : String)\n    branch, commit = raw.split('#')\n    Commit.new(branch, commit)\n  end\nend\n\n@[AC::Route::GET(\"/:commit\", converters: {\n  commit: ConvertCommit\n})]\ndef replace(commit : Commit); end\n</code></pre>"},{"location":"getting_started/routing/#response-codes","title":"Response codes","text":"<p>By default all responses will return 200 OK. The default can be changed and response codes can be mapped to return types</p> <pre><code># change the default response code\n@[AC::Route::GET(\"/\", status_code: HTTP::Status::ACCEPTED)]\ndef replace(commit : Commit)\nend\n\n# map response codes to return types\n@[AC::Route::GET(\"/\", status: {\n  Int32 =&gt; HTTP::Status::OK,\n  String =&gt; HTTP::Status::ACCEPTED,\n  Float64 =&gt; HTTP::Status::CREATED\n})]\ndef replace : Int32 | String | Float64\n  case rand(3)\n  when 1\n    1\n  when 2\n    0.5\n  else\n    \"wasn't 1 or 2\"\n  end\nend\n</code></pre>"},{"location":"getting_started/routing/#macro-dsl","title":"Macro DSL","text":"<p>The macro DSL is the basis for all routing in spider-gazelle. This is as close to the metal as you can get.</p> <pre><code>class MyPhotos &lt; Application\n  # ...\n\n  # GET /my_photos/:id/features\n  get \"/:id/features\", :features do\n    # e.g. render a list of features detected on the photo\n    features = []\n    render json: features\n  end\n\n  # POST /my_photos/:id/feature\n  post \"/my_photos/:id/feature\", :feature do\n    # add a feature to the photo\n    head :ok\n  end\nend\n</code></pre> <p>In the example above we have created a new route with the name <code>features</code> defined by the <code>:features</code> symbol. This creates a function called <code>features</code> in the class <code>MyPhotos</code> class that can be used with filters.</p>"},{"location":"getting_started/routing/#customizing-routes","title":"Customizing routes","text":"<p>You might want to define a route that isn't defined by the class name of the controller. This is also required if you would like to define a root route.</p> <pre><code>class Welcome &lt; Application\n  base \"/\"\n\n  @[AC::Route::GET(\"/\")]\n  def index; end\nend\n</code></pre> <p>Or to define a complex route</p> <pre><code>class Features &lt; Application\n  base \"/my_photos/:photo_id/features\"\n\n  # GET /my_photos/:photo_id/features/\n  @[AC::Route::GET(\"/\")]\n  def index; end\n\n  # GET /my_photos/:photo_id/features/:id\n  @[AC::Route::GET(\"/:id\")]\n  def show; end\n\n  # POST /my_photos/:photo_id/features/\n  @[AC::Route::POST(\"/\")]\n  def create; end\nend\n</code></pre>"},{"location":"getting_started/routing/#redirecting-to-other-routes","title":"Redirecting to other routes","text":"<p>Routes are available as class level functions on the controllers. Consider the <code>Features</code> class above.</p> <pre><code>Features.show(\"photo_id\", \"feature_id\")\n# =&gt; \"/my_photos/photo_id/features/feature_id\" : String\n</code></pre> <p>This can be combined with the redirect helper</p> <pre><code>redirect_to Features.show(\"photo_id\", \"feature_id\")\n</code></pre>"},{"location":"getting_started/routing/#files-and-other-binary-data","title":"Files and other binary data","text":"<p>The recommendation is to manually manage the response so it can be properly piped. Here are two seperate examples:</p> <pre><code># example of directly writing data, no streaming\n@[AC::Route::GET(\"/qr_code.png\")]\ndef png_qr(\n  @[AC::Param::Info(description: \"the data in the QR code\")]\n  content : String\n) : Nil\n  size = 256 # px\n  response.headers[\"Content-Disposition\"] = \"inline\"\n  response.headers[\"Content-Type\"] = \"image/png\"\n  @__render_called__ = true\n\n  png_bytes = QRCode.new(content).as_png(size: size)\n  response.write png_bytes\nend\n</code></pre> <p>example of streaming data from the filesystem:</p> <pre><code># example of streaming a file, ensuring low memory usage\n@[AC::Route::GET(\"/openapi.yaml\")]\ndef openapi\n  response.headers[\"Content-Disposition\"] = %(attachment; filename=\"openapi.yml\")\n  response.headers[\"Content-Type\"] = \"application/yaml\"\n  @__render_called__ = true\n\n  File.open(\"/app/openapi.yml\") do |file|\n    IO.copy(file, response)\n  end\nend\n</code></pre>"},{"location":"getting_started/routing/#inspecting-routes","title":"Inspecting routes","text":"<p>To get a complete list of the available routes in your application execute the <code>./app --routes</code> command in your terminal.</p>"},{"location":"getting_started/sessions/","title":"Sessions and Cookies","text":"<p>Your application can have a session for each user in which you can store small amounts of data that will be persisted between requests. The session is only available in the controller and is stored using Cookies.</p> <p>The cookie data is cryptographically signed to make it tamper-proof. And it is also encrypted so anyone with access to it can't read its contents. (Spider-Gazelle will not accept it if it has been edited).</p> <ul> <li>The session cookie can store around 4kB of data.</li> <li>Storing large amounts of data in the session is discouraged.</li> <li>Typically store a user or session id in the session - which can be used to retrieve required data</li> </ul>"},{"location":"getting_started/sessions/#configuration","title":"Configuration","text":"<p>Spider-Gazelle sets up a session key (the name of the cookie) and session secret when signing the session data. These can be changed in your applications <code>config.cr</code> file.</p>"},{"location":"getting_started/sessions/#accessing-the-session","title":"Accessing the session","text":"<p>In your controller you can access the session through the <code>session</code> instance method.</p> <p>Sessions are lazily loaded. If you don't access sessions in your action's code, they will not be loaded. Hence you will never need to disable sessions, just not accessing them will do the job.</p> <p>Session values are stored using key/value pairs like a hash:</p> <pre><code>class Application &lt; ActionController::Base\n\n  # Finds the User with the ID stored in the session with the key\n  # \"current_user_id\" This is a common way to handle user login in\n  # a Spider-Gazelle application; logging in sets the session value\n  # and logging out removes it.\n  def current_user\n    @current_user ||= session[\"user_id\"]? &amp;&amp;\n      User.find(session[\"user_id\"])\n  end\nend\n</code></pre> <p>To store something in the session, just assign it to the key like a hash:</p> <pre><code>class LoginController &lt; Application\n  # \"Create\" a login, aka \"log the user in\"\n  @[AC::Route::POST(\"/\")]\n  def create(username : String, password : String) : Nil\n    if user = User.authenticate(username, password)\n      # Save the user ID in the session so it can be used in\n      # subsequent requests\n      session[\"user_id\"] = user.id\n    end\n  end\nend\n</code></pre> <p>To remove something from the session, assign that key to be <code>nil</code>:</p> <pre><code>class LoginController &lt; Application\n  # \"Delete\" a login, aka \"log the user out\"\n  @[AC::Route::DELETE(\"/\")]\n  def destroy\n    # Remove the user id from the session\n    @current_user = session[:user_id] = nil\n  end\nend\n</code></pre> <p>To reset the entire session, use <code>session.clear</code>.</p>"},{"location":"getting_started/sessions/#cookies","title":"Cookies","text":"<p>Your application can store small amounts of data on the client - called cookies - that will be persisted across requests and even sessions. Spider-Gazelle provides easy access to cookies via the <code>cookies</code> method, which - much like the <code>session</code> - works like a hash:</p> <pre><code>class CommentsController &lt; Application\n\n  @[AC::Route::GET(\"/new\")]\n  def new\n    # Auto-fill the commenter's name if it has been stored in a cookie\n    comment = Comment.new(author: cookies[\"commenter_name\"])\n    comment\n  end\n\n  @[AC::Route::POST(\"/\", body: :comment)]\n  def create(comment : Comment, remember_name : Bool = false)\n    comment.save!\n    if remember_name\n      # Remember the commenter's name.\n      cookies[\"commenter_name\"] = comment.author\n    else\n      # Delete cookie for the commenter's name cookie, if any.\n      cookies.delete(\"commenter_name\")\n    end\n    comment\n  end\n\nend\n</code></pre>"},{"location":"getting_started/spec/","title":"Writing Specs","text":"<p>Spider-Gazelle ships with a spec helper that leverages HotTopic so you can emulate the server and use HTTP::Client to perform tests.</p>"},{"location":"getting_started/spec/#spec-helper","title":"Spec Helper","text":"<p>Looking at the Spider-Gazelle template app, you'll want to split the following into seperate files</p> <ul> <li>the application config (controllers, models, logging, security, etc)</li> <li>the application entry point (command line parsing, starting the server etc)</li> </ul> <p>This way you can test the app without launching the server</p> <pre><code>require \"spec\"\n\n# Helper methods for testing controllers (curl, with_server, context)\nrequire \"action-controller/spec_helper\"\n\n# Your application config\nrequire \"../src/config\"\n</code></pre>"},{"location":"getting_started/spec/#testing-routes","title":"Testing routes","text":"<p>End to end testing a request</p> <pre><code>describe YourController do\n\n  # a hot topic client for testing your controllers\n  client = AC::SpecHelper.client\n\n  # optional, use to change the response type\n  headers = HTTP::Headers{\n    \"Accept\" =&gt; \"application/yaml\",\n  }\n\n  it \"should welcome you with json\" do\n    result = client.get(\"/\")\n    result.body.should eq %(\"You're being trampled by Spider-Gazelle!\")\n    result.headers[\"Date\"].should_not be_nil\n  end\n\n  it \"should welcome you with yaml\" do\n    result = client.get(\"/\", headers: headers)\n    result.body.should eq \"--- You're being trampled by Spider-Gazelle!\\n\"\n    result.headers[\"Date\"].should_not be_nil\n  end\n\nend\n</code></pre>"},{"location":"getting_started/spec/#unit-testing","title":"Unit testing","text":"<p>Unit testing is possible by first grabbing an instance of a controller.</p> <pre><code>describe YourController do\n\n  # instantiate the controller you wish to unit test\n  # the HTTP request constitues the server context, it is optional\n  welcome = YourController.spec_instance(HTTP::Request.new(\"GET\", \"/\"))\n\n  it \"should sum two numbers\" do\n    welcome.add(10, 30).should eq 40\n  end\n\nend\n</code></pre>"},{"location":"openapi/","title":"Self Documentation","text":"<p>Spider-Gazelle has the ability to ouput OpenAPI descriptions of the routes defined in your service.</p>"},{"location":"openapi/#output","title":"Output","text":"<p>The source code is required to output OpenAPI as we extract descriptions from regular comments. The simplest way to generate the OpenAPI YAML is to call this :</p> <pre><code>ActionController::OpenAPI.generate_open_api_docs(\n    title: \"Application\",\n    version: \"0.0.1\",\n    description: \"App description for OpenAPI docs\"\n  ).to_yaml\n</code></pre> <p>Like the OpenAPI specification, <code>title</code> and <code>version</code> fields are required.  For the other fields, you can refer to the Info OpenAPI Specification</p>"},{"location":"openapi/#usage-with-spider-gazelle-template","title":"Usage with spider-gazelle template","text":"<ol> <li>build the application <code>shards build</code></li> <li>generate the OpenAPI output <code>./bin/app --docs</code></li> <li>If you would like a file then run <code>./bin/app --docs &gt; ./bin/description.yml</code></li> </ol>"},{"location":"openapi/#usage-with-action-controller-project","title":"Usage with <code>action-controller</code> project","text":"<p>You can then serve this document from your service when it's deployed if desirable.</p> <pre><code>class OpenAPI &lt; AC::Base\n  base \"/openapi\"\n\n  DOCS = ActionController::OpenAPI.generate_open_api_docs(\n    title: \"Application\",\n    version: \"0.0.1\",\n    description: \"App description for OpenAPI docs\"\n  ).to_yaml\n\n  get \"/docs\" do\n    render yaml: DOCS\n  end  \nend\n</code></pre> <p>then visit your documentation at \"http://localhost:3000/openapi/docs\"</p>"},{"location":"openapi/params/","title":"Params","text":""},{"location":"openapi/params/#annotations-for-params","title":"Annotations for Params","text":"<p>You can document the parameters of your queries by annotations.</p> <pre><code>class Articles &lt; AC::Base\n  base \"/articles\"\n\n  @[AC::Route::GET(\"/\")]\n  def all_articles(\n    @[AC::Param::Info(description: \"Filter by tag:\", example: \"AngularJS\", required: false)]\n    tag : String?,\n    @[AC::Param::Info(description: \"Filter by author:\", example: \"jake\", require: false)]\n    author : String?,\n    @[AC::Param::Info(description: \"Favorited by user:\", example: \"jake\", require: false)]\n    favorited : String?,\n    @[AC::Param::Info(description: \"Limit number of articles (default is 20):\", example: \"20\", require: false)]\n    limit : UInt32?,\n    @[AC::Param::Info(description: \"Offset/skip number of articles (default is 0):\", example: \"0\", require: false)]\n    offset : UInt32?,\n\n    @[AC::Param::Info(header: \"X-Request-UUID\", description: \"UUID to use for this request\", example: \"ba714f86-cac6-42c7-8956-bcf5105e1b81\")]\n    value : UUID? = nil,\n  )\n</code></pre> <p>You can refer to Parameter OpenAPI Specification</p>"},{"location":"openapi/route/","title":"Routes","text":""},{"location":"openapi/route/#route-descriptions","title":"Route descriptions","text":"<p>Summary and descriptions are extracted from the comments above the function that represents the route.</p> <ul> <li>the first line of the comment is used as a summary</li> <li>if there are multiple lines then all the lines are used as a description</li> </ul> <pre><code>class Comments &lt; AC::Base\n  base \"/comments\"\n\n  # This is a route summary\n  @[AC::Route::GET(\"/\")]\n  def index; end\n\n  # This is a route summary\n  # This is a route description\n  # and the description continued\n  @[AC::Route::POST(\"/\")]\n  def create; end\nend\n</code></pre>"},{"location":"openapi/route/#map-post-data","title":"Map POST data","text":"<pre><code>class Articles &lt; AC::Base\n  base \"/articles\"\n\n  @[AC::Route::POST(\"/\", body: :article)]\n  def create(article : Article); end\nend\n</code></pre>"},{"location":"openapi/schema/","title":"Schema","text":""},{"location":"openapi/schema/#optimal-results","title":"Optimal results","text":"<p>For optimal output it's recommended that you:</p> <ul> <li>decorate your route functions with return types (assumes no body if not decorated)</li> <li>decorate your models to improve JSON schema</li> </ul> <pre><code>class Comments &lt; Application\n  base \"/comments\"\n\n  # description of your model that will be used in the OpenAPI output\n  class Comment\n    include JSON::Serializable\n\n    # add format information to the output schema\n    @[JSON::Field(format: \"email\")]\n    property reply_to : String\n    property user_id : Int64\n    property text : String\n  end\n\n  # This is a route summary\n  @[AC::Route::GET(\"/:comment_id\")]\n  def show(comment_id : Int64) : Comment\n    Comment.find(comment_id)\n  end\nend\n</code></pre>"},{"location":"openapi/schema/#schema-descriptions","title":"Schema descriptions","text":"<p>JSON schema is automatically extracted for all the types being serialised / deserialised including:</p> <ul> <li>Parameters (route and query)</li> <li>Request bodies</li> <li>Response bodies</li> </ul> <p>For JSON::Serializable types you can include additional information.</p> <pre><code>class Comment\n  include JSON::Serializable\n\n  # add format information to the output schema\n  @[JSON::Field(format: \"email\")]\n  property reply_to : String\n  property user_id : Int64\n\n  @[JSON::Field(format: \"email\")]\n  property text : String\n\n  # The `EpochConverter` here means the JSON value will actually be an integer\n  # to avoid the schema output being `type: \"string\", format: \"date-time\"` you can\n  # supply a type override and custom format string.\n  @[JSON::Field(converter: Time::EpochConverter, type: \"integer\", format: \"Int64\")]\n  getter time : Time\nend\n</code></pre> <p>Some of the <code>@[JSON::Field]</code> annotations you can use are:</p> <ul> <li>type</li> <li>format</li> <li>pattern</li> <li>min_length</li> <li>max_length</li> <li>multiple_of</li> <li>minimum</li> <li>exclusive_minimum</li> <li>maximum</li> <li>exclusive_maximum</li> </ul> <p>as per the JSON Schema spec</p>"},{"location":"openapi/schema/#custom-types","title":"Custom types","text":"<p>If your model doesn't use <code>JSON::Serializable</code> and instead is using a custom serializer then you can implment <code>def self.json_schema(openapi : Bool? = nil)</code> to return a <code>NamedTuple</code> with the JSON Schema representation of your model.</p>"}]}